
state 0:

	program : . exp 

	ID	shift 22
	INT	shift 21
	STRING	shift 20
	LPAREN	shift 19
	MINUS	shift 18
	IF	shift 17
	WHILE	shift 16
	FOR	shift 15
	LET	shift 14
	BREAK	shift 13
	NIL	shift 12

	exp	goto 11
	program	goto 143
	lvalue	goto 10
	assign_exp	goto 9
	arith_exp	goto 8
	comp_exp	goto 7
	bool_exp	goto 6
	call_exp	goto 5
	record_exp	goto 4
	array_exp	goto 3
	seq_exp	goto 2
	unit_exp	goto 1

	.	error


state 1:

	exp : unit_exp .  (reduce by rule 19)



	.	reduce by rule 19


state 2:

	exp : seq_exp .  (reduce by rule 18)



	.	reduce by rule 18


state 3:

	exp : array_exp .  (reduce by rule 17)



	.	reduce by rule 17


state 4:

	exp : record_exp .  (reduce by rule 16)



	.	reduce by rule 16


state 5:

	exp : call_exp .  (reduce by rule 15)



	.	reduce by rule 15


state 6:

	exp : bool_exp .  (reduce by rule 14)



	.	reduce by rule 14


state 7:

	exp : comp_exp .  (reduce by rule 13)



	.	reduce by rule 13


state 8:

	exp : arith_exp .  (reduce by rule 12)



	.	reduce by rule 12


state 9:

	exp : assign_exp .  (reduce by rule 11)



	.	reduce by rule 11


state 10:

	exp : lvalue .  (reduce by rule 10)
	lvalue : lvalue . LBRACK exp RBRACK 
	lvalue : lvalue . DOT ID 
	assign_exp : lvalue . ASSIGN exp 
	array_exp : lvalue . LBRACK exp RBRACK OF exp 

	LBRACK	shift 25
	DOT	shift 24
	ASSIGN	shift 23


	.	reduce by rule 10


state 11:

	program : exp .  (reduce by rule 0)
	arith_exp : exp . PLUS exp 
	arith_exp : exp . MINUS exp 
	arith_exp : exp . TIMES exp 
	arith_exp : exp . DIVIDE exp 
	comp_exp : exp . EQ exp 
	comp_exp : exp . NEQ exp 
	comp_exp : exp . LT exp 
	comp_exp : exp . LE exp 
	comp_exp : exp . GT exp 
	comp_exp : exp . GE exp 
	bool_exp : exp . AND exp 
	bool_exp : exp . OR exp 

	PLUS	shift 37
	MINUS	shift 36
	TIMES	shift 35
	DIVIDE	shift 34
	EQ	shift 33
	NEQ	shift 32
	LT	shift 31
	LE	shift 30
	GT	shift 29
	GE	shift 28
	AND	shift 27
	OR	shift 26


	.	reduce by rule 0


state 12:

	exp : NIL .  (reduce by rule 3)



	.	reduce by rule 3


state 13:

	exp : BREAK .  (reduce by rule 4)



	.	reduce by rule 4


state 14:

	exp : LET . decs IN expseq END 


	decs	goto 38

	.	reduce by rule 21


state 15:

	exp : FOR . ID ASSIGN exp TO exp DO exp 

	ID	shift 39


	.	error


state 16:

	exp : WHILE . exp DO exp 

	ID	shift 22
	INT	shift 21
	STRING	shift 20
	LPAREN	shift 19
	MINUS	shift 18
	IF	shift 17
	WHILE	shift 16
	FOR	shift 15
	LET	shift 14
	BREAK	shift 13
	NIL	shift 12

	exp	goto 40
	lvalue	goto 10
	assign_exp	goto 9
	arith_exp	goto 8
	comp_exp	goto 7
	bool_exp	goto 6
	call_exp	goto 5
	record_exp	goto 4
	array_exp	goto 3
	seq_exp	goto 2
	unit_exp	goto 1

	.	error


state 17:

	exp : IF . exp THEN exp ELSE exp 
	exp : IF . exp THEN exp 

	ID	shift 22
	INT	shift 21
	STRING	shift 20
	LPAREN	shift 19
	MINUS	shift 18
	IF	shift 17
	WHILE	shift 16
	FOR	shift 15
	LET	shift 14
	BREAK	shift 13
	NIL	shift 12

	exp	goto 41
	lvalue	goto 10
	assign_exp	goto 9
	arith_exp	goto 8
	comp_exp	goto 7
	bool_exp	goto 6
	call_exp	goto 5
	record_exp	goto 4
	array_exp	goto 3
	seq_exp	goto 2
	unit_exp	goto 1

	.	error


state 18:

	arith_exp : MINUS . exp 

	ID	shift 22
	INT	shift 21
	STRING	shift 20
	LPAREN	shift 19
	MINUS	shift 18
	IF	shift 17
	WHILE	shift 16
	FOR	shift 15
	LET	shift 14
	BREAK	shift 13
	NIL	shift 12

	exp	goto 42
	lvalue	goto 10
	assign_exp	goto 9
	arith_exp	goto 8
	comp_exp	goto 7
	bool_exp	goto 6
	call_exp	goto 5
	record_exp	goto 4
	array_exp	goto 3
	seq_exp	goto 2
	unit_exp	goto 1

	.	error


state 19:

	seq_exp : LPAREN . exp_list RPAREN 
	unit_exp : LPAREN . RPAREN 

	ID	shift 22
	INT	shift 21
	STRING	shift 20
	LPAREN	shift 19
	RPAREN	shift 45
	MINUS	shift 18
	IF	shift 17
	WHILE	shift 16
	FOR	shift 15
	LET	shift 14
	BREAK	shift 13
	NIL	shift 12

	exp	goto 44
	lvalue	goto 10
	assign_exp	goto 9
	arith_exp	goto 8
	comp_exp	goto 7
	bool_exp	goto 6
	call_exp	goto 5
	record_exp	goto 4
	array_exp	goto 3
	seq_exp	goto 2
	exp_list	goto 43
	unit_exp	goto 1

	.	error


state 20:

	exp : STRING .  (reduce by rule 2)



	.	reduce by rule 2


state 21:

	exp : INT .  (reduce by rule 1)



	.	reduce by rule 1


state 22:

	lvalue : ID .  (reduce by rule 42)
	call_exp : ID . LPAREN para_exp RPAREN 
	record_exp : ID . LBRACE record_decs RBRACE 

	LPAREN	shift 47
	LBRACE	shift 46


	.	reduce by rule 42


state 23:

	assign_exp : lvalue ASSIGN . exp 

	ID	shift 22
	INT	shift 21
	STRING	shift 20
	LPAREN	shift 19
	MINUS	shift 18
	IF	shift 17
	WHILE	shift 16
	FOR	shift 15
	LET	shift 14
	BREAK	shift 13
	NIL	shift 12

	exp	goto 48
	lvalue	goto 10
	assign_exp	goto 9
	arith_exp	goto 8
	comp_exp	goto 7
	bool_exp	goto 6
	call_exp	goto 5
	record_exp	goto 4
	array_exp	goto 3
	seq_exp	goto 2
	unit_exp	goto 1

	.	error


state 24:

	lvalue : lvalue DOT . ID 

	ID	shift 49


	.	error


state 25:

	lvalue : lvalue LBRACK . exp RBRACK 
	array_exp : lvalue LBRACK . exp RBRACK OF exp 

	ID	shift 22
	INT	shift 21
	STRING	shift 20
	LPAREN	shift 19
	MINUS	shift 18
	IF	shift 17
	WHILE	shift 16
	FOR	shift 15
	LET	shift 14
	BREAK	shift 13
	NIL	shift 12

	exp	goto 50
	lvalue	goto 10
	assign_exp	goto 9
	arith_exp	goto 8
	comp_exp	goto 7
	bool_exp	goto 6
	call_exp	goto 5
	record_exp	goto 4
	array_exp	goto 3
	seq_exp	goto 2
	unit_exp	goto 1

	.	error


state 26:

	bool_exp : exp OR . exp 

	ID	shift 22
	INT	shift 21
	STRING	shift 20
	LPAREN	shift 19
	MINUS	shift 18
	IF	shift 17
	WHILE	shift 16
	FOR	shift 15
	LET	shift 14
	BREAK	shift 13
	NIL	shift 12

	exp	goto 51
	lvalue	goto 10
	assign_exp	goto 9
	arith_exp	goto 8
	comp_exp	goto 7
	bool_exp	goto 6
	call_exp	goto 5
	record_exp	goto 4
	array_exp	goto 3
	seq_exp	goto 2
	unit_exp	goto 1

	.	error


state 27:

	bool_exp : exp AND . exp 

	ID	shift 22
	INT	shift 21
	STRING	shift 20
	LPAREN	shift 19
	MINUS	shift 18
	IF	shift 17
	WHILE	shift 16
	FOR	shift 15
	LET	shift 14
	BREAK	shift 13
	NIL	shift 12

	exp	goto 52
	lvalue	goto 10
	assign_exp	goto 9
	arith_exp	goto 8
	comp_exp	goto 7
	bool_exp	goto 6
	call_exp	goto 5
	record_exp	goto 4
	array_exp	goto 3
	seq_exp	goto 2
	unit_exp	goto 1

	.	error


state 28:

	comp_exp : exp GE . exp 

	ID	shift 22
	INT	shift 21
	STRING	shift 20
	LPAREN	shift 19
	MINUS	shift 18
	IF	shift 17
	WHILE	shift 16
	FOR	shift 15
	LET	shift 14
	BREAK	shift 13
	NIL	shift 12

	exp	goto 53
	lvalue	goto 10
	assign_exp	goto 9
	arith_exp	goto 8
	comp_exp	goto 7
	bool_exp	goto 6
	call_exp	goto 5
	record_exp	goto 4
	array_exp	goto 3
	seq_exp	goto 2
	unit_exp	goto 1

	.	error


state 29:

	comp_exp : exp GT . exp 

	ID	shift 22
	INT	shift 21
	STRING	shift 20
	LPAREN	shift 19
	MINUS	shift 18
	IF	shift 17
	WHILE	shift 16
	FOR	shift 15
	LET	shift 14
	BREAK	shift 13
	NIL	shift 12

	exp	goto 54
	lvalue	goto 10
	assign_exp	goto 9
	arith_exp	goto 8
	comp_exp	goto 7
	bool_exp	goto 6
	call_exp	goto 5
	record_exp	goto 4
	array_exp	goto 3
	seq_exp	goto 2
	unit_exp	goto 1

	.	error


state 30:

	comp_exp : exp LE . exp 

	ID	shift 22
	INT	shift 21
	STRING	shift 20
	LPAREN	shift 19
	MINUS	shift 18
	IF	shift 17
	WHILE	shift 16
	FOR	shift 15
	LET	shift 14
	BREAK	shift 13
	NIL	shift 12

	exp	goto 55
	lvalue	goto 10
	assign_exp	goto 9
	arith_exp	goto 8
	comp_exp	goto 7
	bool_exp	goto 6
	call_exp	goto 5
	record_exp	goto 4
	array_exp	goto 3
	seq_exp	goto 2
	unit_exp	goto 1

	.	error


state 31:

	comp_exp : exp LT . exp 

	ID	shift 22
	INT	shift 21
	STRING	shift 20
	LPAREN	shift 19
	MINUS	shift 18
	IF	shift 17
	WHILE	shift 16
	FOR	shift 15
	LET	shift 14
	BREAK	shift 13
	NIL	shift 12

	exp	goto 56
	lvalue	goto 10
	assign_exp	goto 9
	arith_exp	goto 8
	comp_exp	goto 7
	bool_exp	goto 6
	call_exp	goto 5
	record_exp	goto 4
	array_exp	goto 3
	seq_exp	goto 2
	unit_exp	goto 1

	.	error


state 32:

	comp_exp : exp NEQ . exp 

	ID	shift 22
	INT	shift 21
	STRING	shift 20
	LPAREN	shift 19
	MINUS	shift 18
	IF	shift 17
	WHILE	shift 16
	FOR	shift 15
	LET	shift 14
	BREAK	shift 13
	NIL	shift 12

	exp	goto 57
	lvalue	goto 10
	assign_exp	goto 9
	arith_exp	goto 8
	comp_exp	goto 7
	bool_exp	goto 6
	call_exp	goto 5
	record_exp	goto 4
	array_exp	goto 3
	seq_exp	goto 2
	unit_exp	goto 1

	.	error


state 33:

	comp_exp : exp EQ . exp 

	ID	shift 22
	INT	shift 21
	STRING	shift 20
	LPAREN	shift 19
	MINUS	shift 18
	IF	shift 17
	WHILE	shift 16
	FOR	shift 15
	LET	shift 14
	BREAK	shift 13
	NIL	shift 12

	exp	goto 58
	lvalue	goto 10
	assign_exp	goto 9
	arith_exp	goto 8
	comp_exp	goto 7
	bool_exp	goto 6
	call_exp	goto 5
	record_exp	goto 4
	array_exp	goto 3
	seq_exp	goto 2
	unit_exp	goto 1

	.	error


state 34:

	arith_exp : exp DIVIDE . exp 

	ID	shift 22
	INT	shift 21
	STRING	shift 20
	LPAREN	shift 19
	MINUS	shift 18
	IF	shift 17
	WHILE	shift 16
	FOR	shift 15
	LET	shift 14
	BREAK	shift 13
	NIL	shift 12

	exp	goto 59
	lvalue	goto 10
	assign_exp	goto 9
	arith_exp	goto 8
	comp_exp	goto 7
	bool_exp	goto 6
	call_exp	goto 5
	record_exp	goto 4
	array_exp	goto 3
	seq_exp	goto 2
	unit_exp	goto 1

	.	error


state 35:

	arith_exp : exp TIMES . exp 

	ID	shift 22
	INT	shift 21
	STRING	shift 20
	LPAREN	shift 19
	MINUS	shift 18
	IF	shift 17
	WHILE	shift 16
	FOR	shift 15
	LET	shift 14
	BREAK	shift 13
	NIL	shift 12

	exp	goto 60
	lvalue	goto 10
	assign_exp	goto 9
	arith_exp	goto 8
	comp_exp	goto 7
	bool_exp	goto 6
	call_exp	goto 5
	record_exp	goto 4
	array_exp	goto 3
	seq_exp	goto 2
	unit_exp	goto 1

	.	error


state 36:

	arith_exp : exp MINUS . exp 

	ID	shift 22
	INT	shift 21
	STRING	shift 20
	LPAREN	shift 19
	MINUS	shift 18
	IF	shift 17
	WHILE	shift 16
	FOR	shift 15
	LET	shift 14
	BREAK	shift 13
	NIL	shift 12

	exp	goto 61
	lvalue	goto 10
	assign_exp	goto 9
	arith_exp	goto 8
	comp_exp	goto 7
	bool_exp	goto 6
	call_exp	goto 5
	record_exp	goto 4
	array_exp	goto 3
	seq_exp	goto 2
	unit_exp	goto 1

	.	error


state 37:

	arith_exp : exp PLUS . exp 

	ID	shift 22
	INT	shift 21
	STRING	shift 20
	LPAREN	shift 19
	MINUS	shift 18
	IF	shift 17
	WHILE	shift 16
	FOR	shift 15
	LET	shift 14
	BREAK	shift 13
	NIL	shift 12

	exp	goto 62
	lvalue	goto 10
	assign_exp	goto 9
	arith_exp	goto 8
	comp_exp	goto 7
	bool_exp	goto 6
	call_exp	goto 5
	record_exp	goto 4
	array_exp	goto 3
	seq_exp	goto 2
	unit_exp	goto 1

	.	error


state 38:

	exp : LET decs . IN expseq END 
	decs : decs . dec 

	IN	shift 71
	FUNCTION	shift 70
	VAR	shift 69
	TYPE	shift 68

	tydeclist	goto 67
	dec	goto 66
	tydec	goto 65
	vardec	goto 64
	fundec	goto 63

	.	error


state 39:

	exp : FOR ID . ASSIGN exp TO exp DO exp 

	ASSIGN	shift 72


	.	error


state 40:

	exp : WHILE exp . DO exp 
	arith_exp : exp . PLUS exp 
	arith_exp : exp . MINUS exp 
	arith_exp : exp . TIMES exp 
	arith_exp : exp . DIVIDE exp 
	comp_exp : exp . EQ exp 
	comp_exp : exp . NEQ exp 
	comp_exp : exp . LT exp 
	comp_exp : exp . LE exp 
	comp_exp : exp . GT exp 
	comp_exp : exp . GE exp 
	bool_exp : exp . AND exp 
	bool_exp : exp . OR exp 

	PLUS	shift 37
	MINUS	shift 36
	TIMES	shift 35
	DIVIDE	shift 34
	EQ	shift 33
	NEQ	shift 32
	LT	shift 31
	LE	shift 30
	GT	shift 29
	GE	shift 28
	AND	shift 27
	OR	shift 26
	DO	shift 73


	.	error


state 41:

	exp : IF exp . THEN exp ELSE exp 
	exp : IF exp . THEN exp 
	arith_exp : exp . PLUS exp 
	arith_exp : exp . MINUS exp 
	arith_exp : exp . TIMES exp 
	arith_exp : exp . DIVIDE exp 
	comp_exp : exp . EQ exp 
	comp_exp : exp . NEQ exp 
	comp_exp : exp . LT exp 
	comp_exp : exp . LE exp 
	comp_exp : exp . GT exp 
	comp_exp : exp . GE exp 
	bool_exp : exp . AND exp 
	bool_exp : exp . OR exp 

	PLUS	shift 37
	MINUS	shift 36
	TIMES	shift 35
	DIVIDE	shift 34
	EQ	shift 33
	NEQ	shift 32
	LT	shift 31
	LE	shift 30
	GT	shift 29
	GE	shift 28
	AND	shift 27
	OR	shift 26
	THEN	shift 74


	.	error


state 42:

	arith_exp : exp . PLUS exp 
	arith_exp : exp . MINUS exp 
	arith_exp : exp . TIMES exp 
	arith_exp : exp . DIVIDE exp 
	arith_exp : MINUS exp .  (reduce by rule 50)
	comp_exp : exp . EQ exp 
	comp_exp : exp . NEQ exp 
	comp_exp : exp . LT exp 
	comp_exp : exp . LE exp 
	comp_exp : exp . GT exp 
	comp_exp : exp . GE exp 
	bool_exp : exp . AND exp 
	bool_exp : exp . OR exp 



	.	reduce by rule 50


state 43:

	seq_exp : LPAREN exp_list . RPAREN 
	exp_list : exp_list . SEMICOLON exp 

	SEMICOLON	shift 76
	RPAREN	shift 75


	.	error


state 44:

	arith_exp : exp . PLUS exp 
	arith_exp : exp . MINUS exp 
	arith_exp : exp . TIMES exp 
	arith_exp : exp . DIVIDE exp 
	comp_exp : exp . EQ exp 
	comp_exp : exp . NEQ exp 
	comp_exp : exp . LT exp 
	comp_exp : exp . LE exp 
	comp_exp : exp . GT exp 
	comp_exp : exp . GE exp 
	bool_exp : exp . AND exp 
	bool_exp : exp . OR exp 
	exp_list : exp .  (reduce by rule 68)

	PLUS	shift 37
	MINUS	shift 36
	TIMES	shift 35
	DIVIDE	shift 34
	EQ	shift 33
	NEQ	shift 32
	LT	shift 31
	LE	shift 30
	GT	shift 29
	GE	shift 28
	AND	shift 27
	OR	shift 26


	.	reduce by rule 68


state 45:

	unit_exp : LPAREN RPAREN .  (reduce by rule 70)



	.	reduce by rule 70


state 46:

	record_exp : ID LBRACE . record_decs RBRACE 

	ID	shift 79

	record_decs	goto 78
	record_dec	goto 77

	.	error


state 47:

	call_exp : ID LPAREN . para_exp RPAREN 

	ID	shift 22
	INT	shift 21
	STRING	shift 20
	LPAREN	shift 19
	MINUS	shift 18
	IF	shift 17
	WHILE	shift 16
	FOR	shift 15
	LET	shift 14
	BREAK	shift 13
	NIL	shift 12

	exp	goto 81
	lvalue	goto 10
	assign_exp	goto 9
	arith_exp	goto 8
	comp_exp	goto 7
	bool_exp	goto 6
	call_exp	goto 5
	para_exp	goto 80
	record_exp	goto 4
	array_exp	goto 3
	seq_exp	goto 2
	unit_exp	goto 1

	.	error


state 48:

	assign_exp : lvalue ASSIGN exp .  (reduce by rule 45)
	arith_exp : exp . PLUS exp 
	arith_exp : exp . MINUS exp 
	arith_exp : exp . TIMES exp 
	arith_exp : exp . DIVIDE exp 
	comp_exp : exp . EQ exp 
	comp_exp : exp . NEQ exp 
	comp_exp : exp . LT exp 
	comp_exp : exp . LE exp 
	comp_exp : exp . GT exp 
	comp_exp : exp . GE exp 
	bool_exp : exp . AND exp 
	bool_exp : exp . OR exp 



	.	reduce by rule 45


state 49:

	lvalue : lvalue DOT ID .  (reduce by rule 44)



	.	reduce by rule 44


state 50:

	lvalue : lvalue LBRACK exp . RBRACK 
	arith_exp : exp . PLUS exp 
	arith_exp : exp . MINUS exp 
	arith_exp : exp . TIMES exp 
	arith_exp : exp . DIVIDE exp 
	comp_exp : exp . EQ exp 
	comp_exp : exp . NEQ exp 
	comp_exp : exp . LT exp 
	comp_exp : exp . LE exp 
	comp_exp : exp . GT exp 
	comp_exp : exp . GE exp 
	bool_exp : exp . AND exp 
	bool_exp : exp . OR exp 
	array_exp : lvalue LBRACK exp . RBRACK OF exp 

	RBRACK	shift 82
	PLUS	shift 37
	MINUS	shift 36
	TIMES	shift 35
	DIVIDE	shift 34
	EQ	shift 33
	NEQ	shift 32
	LT	shift 31
	LE	shift 30
	GT	shift 29
	GE	shift 28
	AND	shift 27
	OR	shift 26


	.	error


state 51:

	arith_exp : exp . PLUS exp 
	arith_exp : exp . MINUS exp 
	arith_exp : exp . TIMES exp 
	arith_exp : exp . DIVIDE exp 
	comp_exp : exp . EQ exp 
	comp_exp : exp . NEQ exp 
	comp_exp : exp . LT exp 
	comp_exp : exp . LE exp 
	comp_exp : exp . GT exp 
	comp_exp : exp . GE exp 
	bool_exp : exp . AND exp 
	bool_exp : exp . OR exp 
	bool_exp : exp OR exp .  (reduce by rule 58)

	PLUS	shift 37
	MINUS	shift 36
	TIMES	shift 35
	DIVIDE	shift 34
	EQ	shift 33
	NEQ	shift 32
	LT	shift 31
	LE	shift 30
	GT	shift 29
	GE	shift 28
	AND	shift 27


	.	reduce by rule 58


state 52:

	arith_exp : exp . PLUS exp 
	arith_exp : exp . MINUS exp 
	arith_exp : exp . TIMES exp 
	arith_exp : exp . DIVIDE exp 
	comp_exp : exp . EQ exp 
	comp_exp : exp . NEQ exp 
	comp_exp : exp . LT exp 
	comp_exp : exp . LE exp 
	comp_exp : exp . GT exp 
	comp_exp : exp . GE exp 
	bool_exp : exp . AND exp 
	bool_exp : exp AND exp .  (reduce by rule 57)
	bool_exp : exp . OR exp 

	PLUS	shift 37
	MINUS	shift 36
	TIMES	shift 35
	DIVIDE	shift 34
	EQ	shift 33
	NEQ	shift 32
	LT	shift 31
	LE	shift 30
	GT	shift 29
	GE	shift 28


	.	reduce by rule 57


state 53:

	arith_exp : exp . PLUS exp 
	arith_exp : exp . MINUS exp 
	arith_exp : exp . TIMES exp 
	arith_exp : exp . DIVIDE exp 
	comp_exp : exp . EQ exp 
	comp_exp : exp . NEQ exp 
	comp_exp : exp . LT exp 
	comp_exp : exp . LE exp 
	comp_exp : exp . GT exp 
	comp_exp : exp . GE exp 
	comp_exp : exp GE exp .  (reduce by rule 56)
	bool_exp : exp . AND exp 
	bool_exp : exp . OR exp 

	EOF	reduce by rule 56
	COMMA	reduce by rule 56
	SEMICOLON	reduce by rule 56
	RPAREN	reduce by rule 56
	RBRACK	reduce by rule 56
	RBRACE	reduce by rule 56
	PLUS	shift 37
	MINUS	shift 36
	TIMES	shift 35
	DIVIDE	shift 34
	AND	reduce by rule 56
	OR	reduce by rule 56
	THEN	reduce by rule 56
	ELSE	reduce by rule 56
	TO	reduce by rule 56
	DO	reduce by rule 56
	IN	reduce by rule 56
	END	reduce by rule 56
	FUNCTION	reduce by rule 56
	VAR	reduce by rule 56
	TYPE	reduce by rule 56


	.	error


state 54:

	arith_exp : exp . PLUS exp 
	arith_exp : exp . MINUS exp 
	arith_exp : exp . TIMES exp 
	arith_exp : exp . DIVIDE exp 
	comp_exp : exp . EQ exp 
	comp_exp : exp . NEQ exp 
	comp_exp : exp . LT exp 
	comp_exp : exp . LE exp 
	comp_exp : exp . GT exp 
	comp_exp : exp GT exp .  (reduce by rule 55)
	comp_exp : exp . GE exp 
	bool_exp : exp . AND exp 
	bool_exp : exp . OR exp 

	EOF	reduce by rule 55
	COMMA	reduce by rule 55
	SEMICOLON	reduce by rule 55
	RPAREN	reduce by rule 55
	RBRACK	reduce by rule 55
	RBRACE	reduce by rule 55
	PLUS	shift 37
	MINUS	shift 36
	TIMES	shift 35
	DIVIDE	shift 34
	AND	reduce by rule 55
	OR	reduce by rule 55
	THEN	reduce by rule 55
	ELSE	reduce by rule 55
	TO	reduce by rule 55
	DO	reduce by rule 55
	IN	reduce by rule 55
	END	reduce by rule 55
	FUNCTION	reduce by rule 55
	VAR	reduce by rule 55
	TYPE	reduce by rule 55


	.	error


state 55:

	arith_exp : exp . PLUS exp 
	arith_exp : exp . MINUS exp 
	arith_exp : exp . TIMES exp 
	arith_exp : exp . DIVIDE exp 
	comp_exp : exp . EQ exp 
	comp_exp : exp . NEQ exp 
	comp_exp : exp . LT exp 
	comp_exp : exp . LE exp 
	comp_exp : exp LE exp .  (reduce by rule 54)
	comp_exp : exp . GT exp 
	comp_exp : exp . GE exp 
	bool_exp : exp . AND exp 
	bool_exp : exp . OR exp 

	EOF	reduce by rule 54
	COMMA	reduce by rule 54
	SEMICOLON	reduce by rule 54
	RPAREN	reduce by rule 54
	RBRACK	reduce by rule 54
	RBRACE	reduce by rule 54
	PLUS	shift 37
	MINUS	shift 36
	TIMES	shift 35
	DIVIDE	shift 34
	AND	reduce by rule 54
	OR	reduce by rule 54
	THEN	reduce by rule 54
	ELSE	reduce by rule 54
	TO	reduce by rule 54
	DO	reduce by rule 54
	IN	reduce by rule 54
	END	reduce by rule 54
	FUNCTION	reduce by rule 54
	VAR	reduce by rule 54
	TYPE	reduce by rule 54


	.	error


state 56:

	arith_exp : exp . PLUS exp 
	arith_exp : exp . MINUS exp 
	arith_exp : exp . TIMES exp 
	arith_exp : exp . DIVIDE exp 
	comp_exp : exp . EQ exp 
	comp_exp : exp . NEQ exp 
	comp_exp : exp . LT exp 
	comp_exp : exp LT exp .  (reduce by rule 53)
	comp_exp : exp . LE exp 
	comp_exp : exp . GT exp 
	comp_exp : exp . GE exp 
	bool_exp : exp . AND exp 
	bool_exp : exp . OR exp 

	EOF	reduce by rule 53
	COMMA	reduce by rule 53
	SEMICOLON	reduce by rule 53
	RPAREN	reduce by rule 53
	RBRACK	reduce by rule 53
	RBRACE	reduce by rule 53
	PLUS	shift 37
	MINUS	shift 36
	TIMES	shift 35
	DIVIDE	shift 34
	AND	reduce by rule 53
	OR	reduce by rule 53
	THEN	reduce by rule 53
	ELSE	reduce by rule 53
	TO	reduce by rule 53
	DO	reduce by rule 53
	IN	reduce by rule 53
	END	reduce by rule 53
	FUNCTION	reduce by rule 53
	VAR	reduce by rule 53
	TYPE	reduce by rule 53


	.	error


state 57:

	arith_exp : exp . PLUS exp 
	arith_exp : exp . MINUS exp 
	arith_exp : exp . TIMES exp 
	arith_exp : exp . DIVIDE exp 
	comp_exp : exp . EQ exp 
	comp_exp : exp . NEQ exp 
	comp_exp : exp NEQ exp .  (reduce by rule 52)
	comp_exp : exp . LT exp 
	comp_exp : exp . LE exp 
	comp_exp : exp . GT exp 
	comp_exp : exp . GE exp 
	bool_exp : exp . AND exp 
	bool_exp : exp . OR exp 

	EOF	reduce by rule 52
	COMMA	reduce by rule 52
	SEMICOLON	reduce by rule 52
	RPAREN	reduce by rule 52
	RBRACK	reduce by rule 52
	RBRACE	reduce by rule 52
	PLUS	shift 37
	MINUS	shift 36
	TIMES	shift 35
	DIVIDE	shift 34
	AND	reduce by rule 52
	OR	reduce by rule 52
	THEN	reduce by rule 52
	ELSE	reduce by rule 52
	TO	reduce by rule 52
	DO	reduce by rule 52
	IN	reduce by rule 52
	END	reduce by rule 52
	FUNCTION	reduce by rule 52
	VAR	reduce by rule 52
	TYPE	reduce by rule 52


	.	error


state 58:

	arith_exp : exp . PLUS exp 
	arith_exp : exp . MINUS exp 
	arith_exp : exp . TIMES exp 
	arith_exp : exp . DIVIDE exp 
	comp_exp : exp . EQ exp 
	comp_exp : exp EQ exp .  (reduce by rule 51)
	comp_exp : exp . NEQ exp 
	comp_exp : exp . LT exp 
	comp_exp : exp . LE exp 
	comp_exp : exp . GT exp 
	comp_exp : exp . GE exp 
	bool_exp : exp . AND exp 
	bool_exp : exp . OR exp 

	EOF	reduce by rule 51
	COMMA	reduce by rule 51
	SEMICOLON	reduce by rule 51
	RPAREN	reduce by rule 51
	RBRACK	reduce by rule 51
	RBRACE	reduce by rule 51
	PLUS	shift 37
	MINUS	shift 36
	TIMES	shift 35
	DIVIDE	shift 34
	AND	reduce by rule 51
	OR	reduce by rule 51
	THEN	reduce by rule 51
	ELSE	reduce by rule 51
	TO	reduce by rule 51
	DO	reduce by rule 51
	IN	reduce by rule 51
	END	reduce by rule 51
	FUNCTION	reduce by rule 51
	VAR	reduce by rule 51
	TYPE	reduce by rule 51


	.	error


state 59:

	arith_exp : exp . PLUS exp 
	arith_exp : exp . MINUS exp 
	arith_exp : exp . TIMES exp 
	arith_exp : exp . DIVIDE exp 
	arith_exp : exp DIVIDE exp .  (reduce by rule 49)
	comp_exp : exp . EQ exp 
	comp_exp : exp . NEQ exp 
	comp_exp : exp . LT exp 
	comp_exp : exp . LE exp 
	comp_exp : exp . GT exp 
	comp_exp : exp . GE exp 
	bool_exp : exp . AND exp 
	bool_exp : exp . OR exp 



	.	reduce by rule 49


state 60:

	arith_exp : exp . PLUS exp 
	arith_exp : exp . MINUS exp 
	arith_exp : exp . TIMES exp 
	arith_exp : exp TIMES exp .  (reduce by rule 48)
	arith_exp : exp . DIVIDE exp 
	comp_exp : exp . EQ exp 
	comp_exp : exp . NEQ exp 
	comp_exp : exp . LT exp 
	comp_exp : exp . LE exp 
	comp_exp : exp . GT exp 
	comp_exp : exp . GE exp 
	bool_exp : exp . AND exp 
	bool_exp : exp . OR exp 



	.	reduce by rule 48


state 61:

	arith_exp : exp . PLUS exp 
	arith_exp : exp . MINUS exp 
	arith_exp : exp MINUS exp .  (reduce by rule 47)
	arith_exp : exp . TIMES exp 
	arith_exp : exp . DIVIDE exp 
	comp_exp : exp . EQ exp 
	comp_exp : exp . NEQ exp 
	comp_exp : exp . LT exp 
	comp_exp : exp . LE exp 
	comp_exp : exp . GT exp 
	comp_exp : exp . GE exp 
	bool_exp : exp . AND exp 
	bool_exp : exp . OR exp 

	TIMES	shift 35
	DIVIDE	shift 34


	.	reduce by rule 47


state 62:

	arith_exp : exp . PLUS exp 
	arith_exp : exp PLUS exp .  (reduce by rule 46)
	arith_exp : exp . MINUS exp 
	arith_exp : exp . TIMES exp 
	arith_exp : exp . DIVIDE exp 
	comp_exp : exp . EQ exp 
	comp_exp : exp . NEQ exp 
	comp_exp : exp . LT exp 
	comp_exp : exp . LE exp 
	comp_exp : exp . GT exp 
	comp_exp : exp . GE exp 
	bool_exp : exp . AND exp 
	bool_exp : exp . OR exp 

	TIMES	shift 35
	DIVIDE	shift 34


	.	reduce by rule 46


state 63:

	dec : fundec .  (reduce by rule 24)



	.	reduce by rule 24


state 64:

	dec : vardec .  (reduce by rule 23)



	.	reduce by rule 23


state 65:

	tydeclist : tydec .  (reduce by rule 25)



	.	reduce by rule 25


state 66:

	decs : decs dec .  (reduce by rule 20)



	.	reduce by rule 20


state 67:

	tydeclist : tydeclist . tydec 
	dec : tydeclist .  (reduce by rule 22)

	TYPE	shift 68

	tydec	goto 83

	.	reduce by rule 22


state 68:

	tydec : TYPE . ID EQ ty 

	ID	shift 84


	.	error


state 69:

	vardec : VAR . ID ASSIGN exp 
	vardec : VAR . ID COLON ID ASSIGN exp 

	ID	shift 85


	.	error


state 70:

	fundec : FUNCTION . ID LPAREN tyfields RPAREN EQ exp 
	fundec : FUNCTION . ID LPAREN tyfields RPAREN COLON ID EQ exp 

	ID	shift 86


	.	error


state 71:

	exp : LET decs IN . expseq END 

	ID	shift 22
	INT	shift 21
	STRING	shift 20
	LPAREN	shift 19
	MINUS	shift 18
	IF	shift 17
	WHILE	shift 16
	FOR	shift 15
	LET	shift 14
	BREAK	shift 13
	NIL	shift 12

	exp	goto 88
	lvalue	goto 10
	assign_exp	goto 9
	arith_exp	goto 8
	comp_exp	goto 7
	bool_exp	goto 6
	expseq	goto 87
	call_exp	goto 5
	record_exp	goto 4
	array_exp	goto 3
	seq_exp	goto 2
	unit_exp	goto 1

	.	error


state 72:

	exp : FOR ID ASSIGN . exp TO exp DO exp 

	ID	shift 22
	INT	shift 21
	STRING	shift 20
	LPAREN	shift 19
	MINUS	shift 18
	IF	shift 17
	WHILE	shift 16
	FOR	shift 15
	LET	shift 14
	BREAK	shift 13
	NIL	shift 12

	exp	goto 89
	lvalue	goto 10
	assign_exp	goto 9
	arith_exp	goto 8
	comp_exp	goto 7
	bool_exp	goto 6
	call_exp	goto 5
	record_exp	goto 4
	array_exp	goto 3
	seq_exp	goto 2
	unit_exp	goto 1

	.	error


state 73:

	exp : WHILE exp DO . exp 

	ID	shift 22
	INT	shift 21
	STRING	shift 20
	LPAREN	shift 19
	MINUS	shift 18
	IF	shift 17
	WHILE	shift 16
	FOR	shift 15
	LET	shift 14
	BREAK	shift 13
	NIL	shift 12

	exp	goto 90
	lvalue	goto 10
	assign_exp	goto 9
	arith_exp	goto 8
	comp_exp	goto 7
	bool_exp	goto 6
	call_exp	goto 5
	record_exp	goto 4
	array_exp	goto 3
	seq_exp	goto 2
	unit_exp	goto 1

	.	error


state 74:

	exp : IF exp THEN . exp ELSE exp 
	exp : IF exp THEN . exp 

	ID	shift 22
	INT	shift 21
	STRING	shift 20
	LPAREN	shift 19
	MINUS	shift 18
	IF	shift 17
	WHILE	shift 16
	FOR	shift 15
	LET	shift 14
	BREAK	shift 13
	NIL	shift 12

	exp	goto 91
	lvalue	goto 10
	assign_exp	goto 9
	arith_exp	goto 8
	comp_exp	goto 7
	bool_exp	goto 6
	call_exp	goto 5
	record_exp	goto 4
	array_exp	goto 3
	seq_exp	goto 2
	unit_exp	goto 1

	.	error


state 75:

	seq_exp : LPAREN exp_list RPAREN .  (reduce by rule 67)



	.	reduce by rule 67


state 76:

	exp_list : exp_list SEMICOLON . exp 

	ID	shift 22
	INT	shift 21
	STRING	shift 20
	LPAREN	shift 19
	MINUS	shift 18
	IF	shift 17
	WHILE	shift 16
	FOR	shift 15
	LET	shift 14
	BREAK	shift 13
	NIL	shift 12

	exp	goto 92
	lvalue	goto 10
	assign_exp	goto 9
	arith_exp	goto 8
	comp_exp	goto 7
	bool_exp	goto 6
	call_exp	goto 5
	record_exp	goto 4
	array_exp	goto 3
	seq_exp	goto 2
	unit_exp	goto 1

	.	error


state 77:

	record_decs : record_dec .  (reduce by rule 63)



	.	reduce by rule 63


state 78:

	record_exp : ID LBRACE record_decs . RBRACE 
	record_decs : record_decs . COMMA record_dec 

	COMMA	shift 94
	RBRACE	shift 93


	.	error


state 79:

	record_dec : ID . EQ exp 

	EQ	shift 95


	.	error


state 80:

	call_exp : ID LPAREN para_exp . RPAREN 
	para_exp : para_exp . COMMA exp 

	COMMA	shift 97
	RPAREN	shift 96


	.	error


state 81:

	arith_exp : exp . PLUS exp 
	arith_exp : exp . MINUS exp 
	arith_exp : exp . TIMES exp 
	arith_exp : exp . DIVIDE exp 
	comp_exp : exp . EQ exp 
	comp_exp : exp . NEQ exp 
	comp_exp : exp . LT exp 
	comp_exp : exp . LE exp 
	comp_exp : exp . GT exp 
	comp_exp : exp . GE exp 
	bool_exp : exp . AND exp 
	bool_exp : exp . OR exp 
	para_exp : exp .  (reduce by rule 60)

	PLUS	shift 37
	MINUS	shift 36
	TIMES	shift 35
	DIVIDE	shift 34
	EQ	shift 33
	NEQ	shift 32
	LT	shift 31
	LE	shift 30
	GT	shift 29
	GE	shift 28
	AND	shift 27
	OR	shift 26


	.	reduce by rule 60


state 82:

	lvalue : lvalue LBRACK exp RBRACK .  (reduce by rule 43)
	array_exp : lvalue LBRACK exp RBRACK . OF exp 

	OF	shift 98


	.	reduce by rule 43


state 83:

	tydeclist : tydeclist tydec .  (reduce by rule 26)



	.	reduce by rule 26


state 84:

	tydec : TYPE ID . EQ ty 

	EQ	shift 99


	.	error


state 85:

	vardec : VAR ID . ASSIGN exp 
	vardec : VAR ID . COLON ID ASSIGN exp 

	COLON	shift 101
	ASSIGN	shift 100


	.	error


state 86:

	fundec : FUNCTION ID . LPAREN tyfields RPAREN EQ exp 
	fundec : FUNCTION ID . LPAREN tyfields RPAREN COLON ID EQ exp 

	LPAREN	shift 102


	.	error


state 87:

	exp : LET decs IN expseq . END 
	expseq : expseq . SEMICOLON exp 

	SEMICOLON	shift 104
	END	shift 103


	.	error


state 88:

	arith_exp : exp . PLUS exp 
	arith_exp : exp . MINUS exp 
	arith_exp : exp . TIMES exp 
	arith_exp : exp . DIVIDE exp 
	comp_exp : exp . EQ exp 
	comp_exp : exp . NEQ exp 
	comp_exp : exp . LT exp 
	comp_exp : exp . LE exp 
	comp_exp : exp . GT exp 
	comp_exp : exp . GE exp 
	bool_exp : exp . AND exp 
	bool_exp : exp . OR exp 
	expseq : exp .  (reduce by rule 40)

	PLUS	shift 37
	MINUS	shift 36
	TIMES	shift 35
	DIVIDE	shift 34
	EQ	shift 33
	NEQ	shift 32
	LT	shift 31
	LE	shift 30
	GT	shift 29
	GE	shift 28
	AND	shift 27
	OR	shift 26


	.	reduce by rule 40


state 89:

	exp : FOR ID ASSIGN exp . TO exp DO exp 
	arith_exp : exp . PLUS exp 
	arith_exp : exp . MINUS exp 
	arith_exp : exp . TIMES exp 
	arith_exp : exp . DIVIDE exp 
	comp_exp : exp . EQ exp 
	comp_exp : exp . NEQ exp 
	comp_exp : exp . LT exp 
	comp_exp : exp . LE exp 
	comp_exp : exp . GT exp 
	comp_exp : exp . GE exp 
	bool_exp : exp . AND exp 
	bool_exp : exp . OR exp 

	PLUS	shift 37
	MINUS	shift 36
	TIMES	shift 35
	DIVIDE	shift 34
	EQ	shift 33
	NEQ	shift 32
	LT	shift 31
	LE	shift 30
	GT	shift 29
	GE	shift 28
	AND	shift 27
	OR	shift 26
	TO	shift 105


	.	error


state 90:

	exp : WHILE exp DO exp .  (reduce by rule 5)
	arith_exp : exp . PLUS exp 
	arith_exp : exp . MINUS exp 
	arith_exp : exp . TIMES exp 
	arith_exp : exp . DIVIDE exp 
	comp_exp : exp . EQ exp 
	comp_exp : exp . NEQ exp 
	comp_exp : exp . LT exp 
	comp_exp : exp . LE exp 
	comp_exp : exp . GT exp 
	comp_exp : exp . GE exp 
	bool_exp : exp . AND exp 
	bool_exp : exp . OR exp 



	.	reduce by rule 5


state 91:

	exp : IF exp THEN exp . ELSE exp 
	exp : IF exp THEN exp .  (reduce by rule 8)
	arith_exp : exp . PLUS exp 
	arith_exp : exp . MINUS exp 
	arith_exp : exp . TIMES exp 
	arith_exp : exp . DIVIDE exp 
	comp_exp : exp . EQ exp 
	comp_exp : exp . NEQ exp 
	comp_exp : exp . LT exp 
	comp_exp : exp . LE exp 
	comp_exp : exp . GT exp 
	comp_exp : exp . GE exp 
	bool_exp : exp . AND exp 
	bool_exp : exp . OR exp 

	ELSE	shift 106


	.	reduce by rule 8


state 92:

	arith_exp : exp . PLUS exp 
	arith_exp : exp . MINUS exp 
	arith_exp : exp . TIMES exp 
	arith_exp : exp . DIVIDE exp 
	comp_exp : exp . EQ exp 
	comp_exp : exp . NEQ exp 
	comp_exp : exp . LT exp 
	comp_exp : exp . LE exp 
	comp_exp : exp . GT exp 
	comp_exp : exp . GE exp 
	bool_exp : exp . AND exp 
	bool_exp : exp . OR exp 
	exp_list : exp_list SEMICOLON exp .  (reduce by rule 69)

	PLUS	shift 37
	MINUS	shift 36
	TIMES	shift 35
	DIVIDE	shift 34
	EQ	shift 33
	NEQ	shift 32
	LT	shift 31
	LE	shift 30
	GT	shift 29
	GE	shift 28
	AND	shift 27
	OR	shift 26


	.	reduce by rule 69


state 93:

	record_exp : ID LBRACE record_decs RBRACE .  (reduce by rule 62)



	.	reduce by rule 62


state 94:

	record_decs : record_decs COMMA . record_dec 

	ID	shift 79

	record_dec	goto 107

	.	error


state 95:

	record_dec : ID EQ . exp 

	ID	shift 22
	INT	shift 21
	STRING	shift 20
	LPAREN	shift 19
	MINUS	shift 18
	IF	shift 17
	WHILE	shift 16
	FOR	shift 15
	LET	shift 14
	BREAK	shift 13
	NIL	shift 12

	exp	goto 108
	lvalue	goto 10
	assign_exp	goto 9
	arith_exp	goto 8
	comp_exp	goto 7
	bool_exp	goto 6
	call_exp	goto 5
	record_exp	goto 4
	array_exp	goto 3
	seq_exp	goto 2
	unit_exp	goto 1

	.	error


state 96:

	call_exp : ID LPAREN para_exp RPAREN .  (reduce by rule 59)



	.	reduce by rule 59


state 97:

	para_exp : para_exp COMMA . exp 

	ID	shift 22
	INT	shift 21
	STRING	shift 20
	LPAREN	shift 19
	MINUS	shift 18
	IF	shift 17
	WHILE	shift 16
	FOR	shift 15
	LET	shift 14
	BREAK	shift 13
	NIL	shift 12

	exp	goto 109
	lvalue	goto 10
	assign_exp	goto 9
	arith_exp	goto 8
	comp_exp	goto 7
	bool_exp	goto 6
	call_exp	goto 5
	record_exp	goto 4
	array_exp	goto 3
	seq_exp	goto 2
	unit_exp	goto 1

	.	error


state 98:

	array_exp : lvalue LBRACK exp RBRACK OF . exp 

	ID	shift 22
	INT	shift 21
	STRING	shift 20
	LPAREN	shift 19
	MINUS	shift 18
	IF	shift 17
	WHILE	shift 16
	FOR	shift 15
	LET	shift 14
	BREAK	shift 13
	NIL	shift 12

	exp	goto 110
	lvalue	goto 10
	assign_exp	goto 9
	arith_exp	goto 8
	comp_exp	goto 7
	bool_exp	goto 6
	call_exp	goto 5
	record_exp	goto 4
	array_exp	goto 3
	seq_exp	goto 2
	unit_exp	goto 1

	.	error


state 99:

	tydec : TYPE ID EQ . ty 

	ID	shift 114
	LBRACE	shift 113
	ARRAY	shift 112

	ty	goto 111

	.	error


state 100:

	vardec : VAR ID ASSIGN . exp 

	ID	shift 22
	INT	shift 21
	STRING	shift 20
	LPAREN	shift 19
	MINUS	shift 18
	IF	shift 17
	WHILE	shift 16
	FOR	shift 15
	LET	shift 14
	BREAK	shift 13
	NIL	shift 12

	exp	goto 115
	lvalue	goto 10
	assign_exp	goto 9
	arith_exp	goto 8
	comp_exp	goto 7
	bool_exp	goto 6
	call_exp	goto 5
	record_exp	goto 4
	array_exp	goto 3
	seq_exp	goto 2
	unit_exp	goto 1

	.	error


state 101:

	vardec : VAR ID COLON . ID ASSIGN exp 

	ID	shift 116


	.	error


state 102:

	fundec : FUNCTION ID LPAREN . tyfields RPAREN EQ exp 
	fundec : FUNCTION ID LPAREN . tyfields RPAREN COLON ID EQ exp 

	ID	shift 120

	tyfield	goto 119
	tyfields	goto 118
	tyfields_nonempty	goto 117

	.	reduce by rule 32


state 103:

	exp : LET decs IN expseq END .  (reduce by rule 6)



	.	reduce by rule 6


state 104:

	expseq : expseq SEMICOLON . exp 

	ID	shift 22
	INT	shift 21
	STRING	shift 20
	LPAREN	shift 19
	MINUS	shift 18
	IF	shift 17
	WHILE	shift 16
	FOR	shift 15
	LET	shift 14
	BREAK	shift 13
	NIL	shift 12

	exp	goto 121
	lvalue	goto 10
	assign_exp	goto 9
	arith_exp	goto 8
	comp_exp	goto 7
	bool_exp	goto 6
	call_exp	goto 5
	record_exp	goto 4
	array_exp	goto 3
	seq_exp	goto 2
	unit_exp	goto 1

	.	error


state 105:

	exp : FOR ID ASSIGN exp TO . exp DO exp 

	ID	shift 22
	INT	shift 21
	STRING	shift 20
	LPAREN	shift 19
	MINUS	shift 18
	IF	shift 17
	WHILE	shift 16
	FOR	shift 15
	LET	shift 14
	BREAK	shift 13
	NIL	shift 12

	exp	goto 122
	lvalue	goto 10
	assign_exp	goto 9
	arith_exp	goto 8
	comp_exp	goto 7
	bool_exp	goto 6
	call_exp	goto 5
	record_exp	goto 4
	array_exp	goto 3
	seq_exp	goto 2
	unit_exp	goto 1

	.	error


state 106:

	exp : IF exp THEN exp ELSE . exp 

	ID	shift 22
	INT	shift 21
	STRING	shift 20
	LPAREN	shift 19
	MINUS	shift 18
	IF	shift 17
	WHILE	shift 16
	FOR	shift 15
	LET	shift 14
	BREAK	shift 13
	NIL	shift 12

	exp	goto 123
	lvalue	goto 10
	assign_exp	goto 9
	arith_exp	goto 8
	comp_exp	goto 7
	bool_exp	goto 6
	call_exp	goto 5
	record_exp	goto 4
	array_exp	goto 3
	seq_exp	goto 2
	unit_exp	goto 1

	.	error


state 107:

	record_decs : record_decs COMMA record_dec .  (reduce by rule 64)



	.	reduce by rule 64


state 108:

	arith_exp : exp . PLUS exp 
	arith_exp : exp . MINUS exp 
	arith_exp : exp . TIMES exp 
	arith_exp : exp . DIVIDE exp 
	comp_exp : exp . EQ exp 
	comp_exp : exp . NEQ exp 
	comp_exp : exp . LT exp 
	comp_exp : exp . LE exp 
	comp_exp : exp . GT exp 
	comp_exp : exp . GE exp 
	bool_exp : exp . AND exp 
	bool_exp : exp . OR exp 
	record_dec : ID EQ exp .  (reduce by rule 65)

	PLUS	shift 37
	MINUS	shift 36
	TIMES	shift 35
	DIVIDE	shift 34
	EQ	shift 33
	NEQ	shift 32
	LT	shift 31
	LE	shift 30
	GT	shift 29
	GE	shift 28
	AND	shift 27
	OR	shift 26


	.	reduce by rule 65


state 109:

	arith_exp : exp . PLUS exp 
	arith_exp : exp . MINUS exp 
	arith_exp : exp . TIMES exp 
	arith_exp : exp . DIVIDE exp 
	comp_exp : exp . EQ exp 
	comp_exp : exp . NEQ exp 
	comp_exp : exp . LT exp 
	comp_exp : exp . LE exp 
	comp_exp : exp . GT exp 
	comp_exp : exp . GE exp 
	bool_exp : exp . AND exp 
	bool_exp : exp . OR exp 
	para_exp : para_exp COMMA exp .  (reduce by rule 61)

	PLUS	shift 37
	MINUS	shift 36
	TIMES	shift 35
	DIVIDE	shift 34
	EQ	shift 33
	NEQ	shift 32
	LT	shift 31
	LE	shift 30
	GT	shift 29
	GE	shift 28
	AND	shift 27
	OR	shift 26


	.	reduce by rule 61


state 110:

	arith_exp : exp . PLUS exp 
	arith_exp : exp . MINUS exp 
	arith_exp : exp . TIMES exp 
	arith_exp : exp . DIVIDE exp 
	comp_exp : exp . EQ exp 
	comp_exp : exp . NEQ exp 
	comp_exp : exp . LT exp 
	comp_exp : exp . LE exp 
	comp_exp : exp . GT exp 
	comp_exp : exp . GE exp 
	bool_exp : exp . AND exp 
	bool_exp : exp . OR exp 
	array_exp : lvalue LBRACK exp RBRACK OF exp .  (reduce by rule 66)



	.	reduce by rule 66


state 111:

	tydec : TYPE ID EQ ty .  (reduce by rule 27)



	.	reduce by rule 27


state 112:

	ty : ARRAY . OF ID 

	OF	shift 124


	.	error


state 113:

	ty : LBRACE . tyfields RBRACE 

	ID	shift 120

	tyfield	goto 119
	tyfields	goto 125
	tyfields_nonempty	goto 117

	.	reduce by rule 32


state 114:

	ty : ID .  (reduce by rule 28)



	.	reduce by rule 28


state 115:

	arith_exp : exp . PLUS exp 
	arith_exp : exp . MINUS exp 
	arith_exp : exp . TIMES exp 
	arith_exp : exp . DIVIDE exp 
	comp_exp : exp . EQ exp 
	comp_exp : exp . NEQ exp 
	comp_exp : exp . LT exp 
	comp_exp : exp . LE exp 
	comp_exp : exp . GT exp 
	comp_exp : exp . GE exp 
	bool_exp : exp . AND exp 
	bool_exp : exp . OR exp 
	vardec : VAR ID ASSIGN exp .  (reduce by rule 36)

	PLUS	shift 37
	MINUS	shift 36
	TIMES	shift 35
	DIVIDE	shift 34
	EQ	shift 33
	NEQ	shift 32
	LT	shift 31
	LE	shift 30
	GT	shift 29
	GE	shift 28
	AND	shift 27
	OR	shift 26


	.	reduce by rule 36


state 116:

	vardec : VAR ID COLON ID . ASSIGN exp 

	ASSIGN	shift 126


	.	error


state 117:

	tyfields : tyfields_nonempty .  (reduce by rule 33)



	.	reduce by rule 33


state 118:

	tyfields_nonempty : tyfields . COMMA tyfield 
	fundec : FUNCTION ID LPAREN tyfields . RPAREN EQ exp 
	fundec : FUNCTION ID LPAREN tyfields . RPAREN COLON ID EQ exp 

	COMMA	shift 128
	RPAREN	shift 127


	.	error


state 119:

	tyfields_nonempty : tyfield .  (reduce by rule 34)



	.	reduce by rule 34


state 120:

	tyfield : ID . COLON ID 

	COLON	shift 129


	.	error


state 121:

	arith_exp : exp . PLUS exp 
	arith_exp : exp . MINUS exp 
	arith_exp : exp . TIMES exp 
	arith_exp : exp . DIVIDE exp 
	comp_exp : exp . EQ exp 
	comp_exp : exp . NEQ exp 
	comp_exp : exp . LT exp 
	comp_exp : exp . LE exp 
	comp_exp : exp . GT exp 
	comp_exp : exp . GE exp 
	bool_exp : exp . AND exp 
	bool_exp : exp . OR exp 
	expseq : expseq SEMICOLON exp .  (reduce by rule 41)

	PLUS	shift 37
	MINUS	shift 36
	TIMES	shift 35
	DIVIDE	shift 34
	EQ	shift 33
	NEQ	shift 32
	LT	shift 31
	LE	shift 30
	GT	shift 29
	GE	shift 28
	AND	shift 27
	OR	shift 26


	.	reduce by rule 41


state 122:

	exp : FOR ID ASSIGN exp TO exp . DO exp 
	arith_exp : exp . PLUS exp 
	arith_exp : exp . MINUS exp 
	arith_exp : exp . TIMES exp 
	arith_exp : exp . DIVIDE exp 
	comp_exp : exp . EQ exp 
	comp_exp : exp . NEQ exp 
	comp_exp : exp . LT exp 
	comp_exp : exp . LE exp 
	comp_exp : exp . GT exp 
	comp_exp : exp . GE exp 
	bool_exp : exp . AND exp 
	bool_exp : exp . OR exp 

	PLUS	shift 37
	MINUS	shift 36
	TIMES	shift 35
	DIVIDE	shift 34
	EQ	shift 33
	NEQ	shift 32
	LT	shift 31
	LE	shift 30
	GT	shift 29
	GE	shift 28
	AND	shift 27
	OR	shift 26
	DO	shift 130


	.	error


state 123:

	exp : IF exp THEN exp ELSE exp .  (reduce by rule 7)
	arith_exp : exp . PLUS exp 
	arith_exp : exp . MINUS exp 
	arith_exp : exp . TIMES exp 
	arith_exp : exp . DIVIDE exp 
	comp_exp : exp . EQ exp 
	comp_exp : exp . NEQ exp 
	comp_exp : exp . LT exp 
	comp_exp : exp . LE exp 
	comp_exp : exp . GT exp 
	comp_exp : exp . GE exp 
	bool_exp : exp . AND exp 
	bool_exp : exp . OR exp 



	.	reduce by rule 7


state 124:

	ty : ARRAY OF . ID 

	ID	shift 131


	.	error


state 125:

	ty : LBRACE tyfields . RBRACE 
	tyfields_nonempty : tyfields . COMMA tyfield 

	COMMA	shift 128
	RBRACE	shift 132


	.	error


state 126:

	vardec : VAR ID COLON ID ASSIGN . exp 

	ID	shift 22
	INT	shift 21
	STRING	shift 20
	LPAREN	shift 19
	MINUS	shift 18
	IF	shift 17
	WHILE	shift 16
	FOR	shift 15
	LET	shift 14
	BREAK	shift 13
	NIL	shift 12

	exp	goto 133
	lvalue	goto 10
	assign_exp	goto 9
	arith_exp	goto 8
	comp_exp	goto 7
	bool_exp	goto 6
	call_exp	goto 5
	record_exp	goto 4
	array_exp	goto 3
	seq_exp	goto 2
	unit_exp	goto 1

	.	error


state 127:

	fundec : FUNCTION ID LPAREN tyfields RPAREN . EQ exp 
	fundec : FUNCTION ID LPAREN tyfields RPAREN . COLON ID EQ exp 

	COLON	shift 135
	EQ	shift 134


	.	error


state 128:

	tyfields_nonempty : tyfields COMMA . tyfield 

	ID	shift 120

	tyfield	goto 136

	.	error


state 129:

	tyfield : ID COLON . ID 

	ID	shift 137


	.	error


state 130:

	exp : FOR ID ASSIGN exp TO exp DO . exp 

	ID	shift 22
	INT	shift 21
	STRING	shift 20
	LPAREN	shift 19
	MINUS	shift 18
	IF	shift 17
	WHILE	shift 16
	FOR	shift 15
	LET	shift 14
	BREAK	shift 13
	NIL	shift 12

	exp	goto 138
	lvalue	goto 10
	assign_exp	goto 9
	arith_exp	goto 8
	comp_exp	goto 7
	bool_exp	goto 6
	call_exp	goto 5
	record_exp	goto 4
	array_exp	goto 3
	seq_exp	goto 2
	unit_exp	goto 1

	.	error


state 131:

	ty : ARRAY OF ID .  (reduce by rule 30)



	.	reduce by rule 30


state 132:

	ty : LBRACE tyfields RBRACE .  (reduce by rule 29)



	.	reduce by rule 29


state 133:

	arith_exp : exp . PLUS exp 
	arith_exp : exp . MINUS exp 
	arith_exp : exp . TIMES exp 
	arith_exp : exp . DIVIDE exp 
	comp_exp : exp . EQ exp 
	comp_exp : exp . NEQ exp 
	comp_exp : exp . LT exp 
	comp_exp : exp . LE exp 
	comp_exp : exp . GT exp 
	comp_exp : exp . GE exp 
	bool_exp : exp . AND exp 
	bool_exp : exp . OR exp 
	vardec : VAR ID COLON ID ASSIGN exp .  (reduce by rule 37)

	PLUS	shift 37
	MINUS	shift 36
	TIMES	shift 35
	DIVIDE	shift 34
	EQ	shift 33
	NEQ	shift 32
	LT	shift 31
	LE	shift 30
	GT	shift 29
	GE	shift 28
	AND	shift 27
	OR	shift 26


	.	reduce by rule 37


state 134:

	fundec : FUNCTION ID LPAREN tyfields RPAREN EQ . exp 

	ID	shift 22
	INT	shift 21
	STRING	shift 20
	LPAREN	shift 19
	MINUS	shift 18
	IF	shift 17
	WHILE	shift 16
	FOR	shift 15
	LET	shift 14
	BREAK	shift 13
	NIL	shift 12

	exp	goto 139
	lvalue	goto 10
	assign_exp	goto 9
	arith_exp	goto 8
	comp_exp	goto 7
	bool_exp	goto 6
	call_exp	goto 5
	record_exp	goto 4
	array_exp	goto 3
	seq_exp	goto 2
	unit_exp	goto 1

	.	error


state 135:

	fundec : FUNCTION ID LPAREN tyfields RPAREN COLON . ID EQ exp 

	ID	shift 140


	.	error


state 136:

	tyfields_nonempty : tyfields COMMA tyfield .  (reduce by rule 35)



	.	reduce by rule 35


state 137:

	tyfield : ID COLON ID .  (reduce by rule 31)



	.	reduce by rule 31


state 138:

	exp : FOR ID ASSIGN exp TO exp DO exp .  (reduce by rule 9)
	arith_exp : exp . PLUS exp 
	arith_exp : exp . MINUS exp 
	arith_exp : exp . TIMES exp 
	arith_exp : exp . DIVIDE exp 
	comp_exp : exp . EQ exp 
	comp_exp : exp . NEQ exp 
	comp_exp : exp . LT exp 
	comp_exp : exp . LE exp 
	comp_exp : exp . GT exp 
	comp_exp : exp . GE exp 
	bool_exp : exp . AND exp 
	bool_exp : exp . OR exp 



	.	reduce by rule 9


state 139:

	arith_exp : exp . PLUS exp 
	arith_exp : exp . MINUS exp 
	arith_exp : exp . TIMES exp 
	arith_exp : exp . DIVIDE exp 
	comp_exp : exp . EQ exp 
	comp_exp : exp . NEQ exp 
	comp_exp : exp . LT exp 
	comp_exp : exp . LE exp 
	comp_exp : exp . GT exp 
	comp_exp : exp . GE exp 
	bool_exp : exp . AND exp 
	bool_exp : exp . OR exp 
	fundec : FUNCTION ID LPAREN tyfields RPAREN EQ exp .  (reduce by rule 38)

	PLUS	shift 37
	MINUS	shift 36
	TIMES	shift 35
	DIVIDE	shift 34
	EQ	shift 33
	NEQ	shift 32
	LT	shift 31
	LE	shift 30
	GT	shift 29
	GE	shift 28
	AND	shift 27
	OR	shift 26


	.	reduce by rule 38


state 140:

	fundec : FUNCTION ID LPAREN tyfields RPAREN COLON ID . EQ exp 

	EQ	shift 141


	.	error


state 141:

	fundec : FUNCTION ID LPAREN tyfields RPAREN COLON ID EQ . exp 

	ID	shift 22
	INT	shift 21
	STRING	shift 20
	LPAREN	shift 19
	MINUS	shift 18
	IF	shift 17
	WHILE	shift 16
	FOR	shift 15
	LET	shift 14
	BREAK	shift 13
	NIL	shift 12

	exp	goto 142
	lvalue	goto 10
	assign_exp	goto 9
	arith_exp	goto 8
	comp_exp	goto 7
	bool_exp	goto 6
	call_exp	goto 5
	record_exp	goto 4
	array_exp	goto 3
	seq_exp	goto 2
	unit_exp	goto 1

	.	error


state 142:

	arith_exp : exp . PLUS exp 
	arith_exp : exp . MINUS exp 
	arith_exp : exp . TIMES exp 
	arith_exp : exp . DIVIDE exp 
	comp_exp : exp . EQ exp 
	comp_exp : exp . NEQ exp 
	comp_exp : exp . LT exp 
	comp_exp : exp . LE exp 
	comp_exp : exp . GT exp 
	comp_exp : exp . GE exp 
	bool_exp : exp . AND exp 
	bool_exp : exp . OR exp 
	fundec : FUNCTION ID LPAREN tyfields RPAREN COLON ID EQ exp .  (reduce by rule 39)

	PLUS	shift 37
	MINUS	shift 36
	TIMES	shift 35
	DIVIDE	shift 34
	EQ	shift 33
	NEQ	shift 32
	LT	shift 31
	LE	shift 30
	GT	shift 29
	GE	shift 28
	AND	shift 27
	OR	shift 26


	.	reduce by rule 39


state 143:


	EOF	accept


	.	error

435 of 955 action table entries left after compaction
418 goto table entries
