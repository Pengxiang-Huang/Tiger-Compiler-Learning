functor TigerLrValsFun(structure Token : TOKEN)
 : sig structure ParserData : PARSER_DATA
       structure Tokens : Tiger_TOKENS
   end
 = 
struct
structure ParserData=
struct
structure Header = 
struct
structure A = Absyn


open Symbol

fun simpleVar(id: string, pos: int) = A.SimpleVar((symbol id), pos);
fun getID (A.SimpleVar(id, _)) = id

fun getExps ((exp, expleft)::rest) = exp 


end
structure LrTable = Token.LrTable
structure Token = Token
local open LrTable in 
val table=let val actionRows =
"\
\\001\000\001\000\000\000\000\000\
\\001\000\001\000\211\000\005\000\211\000\007\000\211\000\009\000\211\000\
\\011\000\211\000\013\000\211\000\015\000\040\000\016\000\039\000\
\\017\000\038\000\018\000\037\000\025\000\211\000\026\000\211\000\
\\030\000\211\000\031\000\211\000\034\000\211\000\035\000\211\000\
\\037\000\211\000\038\000\211\000\042\000\211\000\043\000\211\000\
\\044\000\211\000\000\000\
\\001\000\001\000\212\000\005\000\212\000\007\000\212\000\009\000\212\000\
\\011\000\212\000\013\000\212\000\015\000\040\000\016\000\039\000\
\\017\000\038\000\018\000\037\000\025\000\212\000\026\000\212\000\
\\030\000\212\000\031\000\212\000\034\000\212\000\035\000\212\000\
\\037\000\212\000\038\000\212\000\042\000\212\000\043\000\212\000\
\\044\000\212\000\000\000\
\\001\000\001\000\213\000\005\000\213\000\007\000\213\000\009\000\213\000\
\\011\000\213\000\013\000\213\000\015\000\040\000\016\000\039\000\
\\017\000\038\000\018\000\037\000\025\000\213\000\026\000\213\000\
\\030\000\213\000\031\000\213\000\034\000\213\000\035\000\213\000\
\\037\000\213\000\038\000\213\000\042\000\213\000\043\000\213\000\
\\044\000\213\000\000\000\
\\001\000\001\000\214\000\005\000\214\000\007\000\214\000\009\000\214\000\
\\011\000\214\000\013\000\214\000\015\000\040\000\016\000\039\000\
\\017\000\038\000\018\000\037\000\025\000\214\000\026\000\214\000\
\\030\000\214\000\031\000\214\000\034\000\214\000\035\000\214\000\
\\037\000\214\000\038\000\214\000\042\000\214\000\043\000\214\000\
\\044\000\214\000\000\000\
\\001\000\001\000\215\000\005\000\215\000\007\000\215\000\009\000\215\000\
\\011\000\215\000\013\000\215\000\015\000\040\000\016\000\039\000\
\\017\000\038\000\018\000\037\000\025\000\215\000\026\000\215\000\
\\030\000\215\000\031\000\215\000\034\000\215\000\035\000\215\000\
\\037\000\215\000\038\000\215\000\042\000\215\000\043\000\215\000\
\\044\000\215\000\000\000\
\\001\000\001\000\216\000\005\000\216\000\007\000\216\000\009\000\216\000\
\\011\000\216\000\013\000\216\000\015\000\040\000\016\000\039\000\
\\017\000\038\000\018\000\037\000\025\000\216\000\026\000\216\000\
\\030\000\216\000\031\000\216\000\034\000\216\000\035\000\216\000\
\\037\000\216\000\038\000\216\000\042\000\216\000\043\000\216\000\
\\044\000\216\000\000\000\
\\001\000\002\000\025\000\003\000\024\000\004\000\023\000\008\000\022\000\
\\009\000\048\000\016\000\021\000\029\000\020\000\032\000\019\000\
\\033\000\018\000\036\000\017\000\040\000\016\000\041\000\015\000\000\000\
\\001\000\002\000\025\000\003\000\024\000\004\000\023\000\008\000\022\000\
\\016\000\021\000\029\000\020\000\032\000\019\000\033\000\018\000\
\\036\000\017\000\040\000\016\000\041\000\015\000\000\000\
\\001\000\002\000\042\000\000\000\
\\001\000\002\000\052\000\000\000\
\\001\000\002\000\084\000\000\000\
\\001\000\002\000\084\000\013\000\083\000\000\000\
\\001\000\002\000\091\000\000\000\
\\001\000\002\000\092\000\000\000\
\\001\000\002\000\093\000\000\000\
\\001\000\002\000\121\000\012\000\120\000\028\000\119\000\000\000\
\\001\000\002\000\123\000\000\000\
\\001\000\002\000\127\000\000\000\
\\001\000\002\000\138\000\000\000\
\\001\000\002\000\144\000\000\000\
\\001\000\002\000\147\000\000\000\
\\001\000\005\000\101\000\013\000\100\000\000\000\
\\001\000\005\000\135\000\009\000\134\000\000\000\
\\001\000\005\000\135\000\013\000\139\000\000\000\
\\001\000\006\000\108\000\027\000\107\000\000\000\
\\001\000\006\000\136\000\000\000\
\\001\000\006\000\142\000\019\000\141\000\000\000\
\\001\000\007\000\080\000\009\000\079\000\000\000\
\\001\000\007\000\111\000\038\000\110\000\000\000\
\\001\000\008\000\109\000\000\000\
\\001\000\009\000\104\000\000\000\
\\001\000\011\000\088\000\015\000\040\000\016\000\039\000\017\000\038\000\
\\018\000\037\000\019\000\036\000\020\000\035\000\021\000\034\000\
\\022\000\033\000\023\000\032\000\024\000\031\000\025\000\030\000\
\\026\000\029\000\000\000\
\\001\000\015\000\040\000\016\000\039\000\017\000\038\000\018\000\037\000\
\\019\000\036\000\020\000\035\000\021\000\034\000\022\000\033\000\
\\023\000\032\000\024\000\031\000\025\000\030\000\026\000\029\000\
\\030\000\078\000\000\000\
\\001\000\015\000\040\000\016\000\039\000\017\000\038\000\018\000\037\000\
\\019\000\036\000\020\000\035\000\021\000\034\000\022\000\033\000\
\\023\000\032\000\024\000\031\000\025\000\030\000\026\000\029\000\
\\034\000\112\000\000\000\
\\001\000\015\000\040\000\016\000\039\000\017\000\038\000\018\000\037\000\
\\019\000\036\000\020\000\035\000\021\000\034\000\022\000\033\000\
\\023\000\032\000\024\000\031\000\025\000\030\000\026\000\029\000\
\\035\000\077\000\000\000\
\\001\000\015\000\040\000\016\000\039\000\017\000\038\000\018\000\037\000\
\\019\000\036\000\020\000\035\000\021\000\034\000\022\000\033\000\
\\023\000\032\000\024\000\031\000\025\000\030\000\026\000\029\000\
\\035\000\137\000\000\000\
\\001\000\019\000\102\000\000\000\
\\001\000\019\000\106\000\000\000\
\\001\000\019\000\148\000\000\000\
\\001\000\027\000\076\000\000\000\
\\001\000\027\000\133\000\000\000\
\\001\000\037\000\075\000\042\000\074\000\043\000\073\000\044\000\072\000\000\000\
\\001\000\039\000\131\000\000\000\
\\151\000\015\000\040\000\016\000\039\000\017\000\038\000\018\000\037\000\
\\019\000\036\000\020\000\035\000\021\000\034\000\022\000\033\000\
\\023\000\032\000\024\000\031\000\025\000\030\000\026\000\029\000\000\000\
\\152\000\000\000\
\\153\000\000\000\
\\154\000\000\000\
\\155\000\000\000\
\\156\000\015\000\040\000\016\000\039\000\017\000\038\000\018\000\037\000\
\\019\000\036\000\020\000\035\000\021\000\034\000\022\000\033\000\
\\023\000\032\000\024\000\031\000\025\000\030\000\026\000\029\000\000\000\
\\157\000\000\000\
\\158\000\015\000\040\000\016\000\039\000\017\000\038\000\018\000\037\000\
\\019\000\036\000\020\000\035\000\021\000\034\000\022\000\033\000\
\\023\000\032\000\024\000\031\000\025\000\030\000\026\000\029\000\000\000\
\\159\000\015\000\040\000\016\000\039\000\017\000\038\000\018\000\037\000\
\\019\000\036\000\020\000\035\000\021\000\034\000\022\000\033\000\
\\023\000\032\000\024\000\031\000\025\000\030\000\026\000\029\000\
\\031\000\113\000\000\000\
\\160\000\015\000\040\000\016\000\039\000\017\000\038\000\018\000\037\000\
\\019\000\036\000\020\000\035\000\021\000\034\000\022\000\033\000\
\\023\000\032\000\024\000\031\000\025\000\030\000\026\000\029\000\000\000\
\\161\000\010\000\028\000\014\000\027\000\027\000\026\000\000\000\
\\162\000\000\000\
\\163\000\000\000\
\\164\000\000\000\
\\165\000\000\000\
\\166\000\000\000\
\\167\000\000\000\
\\168\000\000\000\
\\169\000\000\000\
\\170\000\000\000\
\\171\000\000\000\
\\172\000\000\000\
\\173\000\000\000\
\\174\000\044\000\072\000\000\000\
\\175\000\000\000\
\\176\000\042\000\074\000\000\000\
\\177\000\000\000\
\\178\000\000\000\
\\179\000\000\000\
\\180\000\000\000\
\\181\000\000\000\
\\182\000\000\000\
\\183\000\000\000\
\\184\000\002\000\127\000\000\000\
\\185\000\000\000\
\\186\000\000\000\
\\187\000\000\000\
\\188\000\015\000\040\000\016\000\039\000\017\000\038\000\018\000\037\000\
\\019\000\036\000\020\000\035\000\021\000\034\000\022\000\033\000\
\\023\000\032\000\024\000\031\000\025\000\030\000\026\000\029\000\000\000\
\\189\000\015\000\040\000\016\000\039\000\017\000\038\000\018\000\037\000\
\\019\000\036\000\020\000\035\000\021\000\034\000\022\000\033\000\
\\023\000\032\000\024\000\031\000\025\000\030\000\026\000\029\000\000\000\
\\190\000\000\000\
\\191\000\000\000\
\\192\000\015\000\040\000\016\000\039\000\017\000\038\000\018\000\037\000\
\\019\000\036\000\020\000\035\000\021\000\034\000\022\000\033\000\
\\023\000\032\000\024\000\031\000\025\000\030\000\026\000\029\000\000\000\
\\193\000\015\000\040\000\016\000\039\000\017\000\038\000\018\000\037\000\
\\019\000\036\000\020\000\035\000\021\000\034\000\022\000\033\000\
\\023\000\032\000\024\000\031\000\025\000\030\000\026\000\029\000\000\000\
\\194\000\008\000\050\000\012\000\049\000\000\000\
\\195\000\039\000\105\000\000\000\
\\196\000\000\000\
\\197\000\015\000\040\000\016\000\039\000\017\000\038\000\018\000\037\000\
\\019\000\036\000\020\000\035\000\021\000\034\000\022\000\033\000\
\\023\000\032\000\024\000\031\000\025\000\030\000\026\000\029\000\000\000\
\\198\000\015\000\040\000\016\000\039\000\017\000\038\000\018\000\037\000\
\\019\000\036\000\020\000\035\000\021\000\034\000\022\000\033\000\
\\023\000\032\000\024\000\031\000\025\000\030\000\026\000\029\000\000\000\
\\199\000\015\000\040\000\016\000\039\000\017\000\038\000\018\000\037\000\
\\019\000\036\000\020\000\035\000\021\000\034\000\022\000\033\000\
\\023\000\032\000\024\000\031\000\025\000\030\000\026\000\029\000\000\000\
\\200\000\015\000\040\000\016\000\039\000\017\000\038\000\018\000\037\000\
\\019\000\036\000\020\000\035\000\021\000\034\000\022\000\033\000\
\\023\000\032\000\024\000\031\000\025\000\030\000\026\000\029\000\000\000\
\\201\000\000\000\
\\202\000\000\000\
\\203\000\000\000\
\\204\000\000\000\
\\205\000\015\000\040\000\016\000\039\000\017\000\038\000\018\000\037\000\
\\019\000\036\000\020\000\035\000\021\000\034\000\022\000\033\000\
\\023\000\032\000\024\000\031\000\025\000\030\000\026\000\029\000\000\000\
\\206\000\017\000\038\000\018\000\037\000\000\000\
\\207\000\017\000\038\000\018\000\037\000\000\000\
\\208\000\000\000\
\\209\000\000\000\
\\210\000\000\000\
\\217\000\015\000\040\000\016\000\039\000\017\000\038\000\018\000\037\000\
\\019\000\036\000\020\000\035\000\021\000\034\000\022\000\033\000\
\\023\000\032\000\024\000\031\000\000\000\
\\218\000\015\000\040\000\016\000\039\000\017\000\038\000\018\000\037\000\
\\019\000\036\000\020\000\035\000\021\000\034\000\022\000\033\000\
\\023\000\032\000\024\000\031\000\025\000\030\000\000\000\
\\219\000\000\000\
\\220\000\005\000\103\000\000\000\
\\221\000\002\000\025\000\003\000\024\000\004\000\023\000\008\000\022\000\
\\016\000\021\000\029\000\020\000\032\000\019\000\033\000\018\000\
\\036\000\017\000\040\000\016\000\041\000\015\000\000\000\
\\222\000\015\000\040\000\016\000\039\000\017\000\038\000\018\000\037\000\
\\019\000\036\000\020\000\035\000\021\000\034\000\022\000\033\000\
\\023\000\032\000\024\000\031\000\025\000\030\000\026\000\029\000\000\000\
\\223\000\015\000\040\000\016\000\039\000\017\000\038\000\018\000\037\000\
\\019\000\036\000\020\000\035\000\021\000\034\000\022\000\033\000\
\\023\000\032\000\024\000\031\000\025\000\030\000\026\000\029\000\000\000\
\\224\000\000\000\
\\225\000\015\000\040\000\016\000\039\000\017\000\038\000\018\000\037\000\
\\019\000\036\000\020\000\035\000\021\000\034\000\022\000\033\000\
\\023\000\032\000\024\000\031\000\025\000\030\000\026\000\029\000\000\000\
\\226\000\015\000\040\000\016\000\039\000\017\000\038\000\018\000\037\000\
\\019\000\036\000\020\000\035\000\021\000\034\000\022\000\033\000\
\\023\000\032\000\024\000\031\000\025\000\030\000\026\000\029\000\000\000\
\\227\000\000\000\
\"
val actionRowNumbers =
"\008\000\058\000\064\000\063\000\
\\056\000\057\000\062\000\061\000\
\\060\000\059\000\055\000\054\000\
\\044\000\047\000\048\000\066\000\
\\009\000\008\000\008\000\008\000\
\\007\000\046\000\045\000\087\000\
\\008\000\010\000\008\000\008\000\
\\008\000\008\000\008\000\008\000\
\\008\000\008\000\008\000\008\000\
\\008\000\008\000\008\000\042\000\
\\040\000\035\000\033\000\103\000\
\\028\000\112\000\114\000\012\000\
\\108\000\092\000\089\000\032\000\
\\105\000\104\000\006\000\005\000\
\\004\000\003\000\002\000\001\000\
\\102\000\101\000\100\000\099\000\
\\070\000\067\000\069\000\083\000\
\\068\000\065\000\013\000\014\000\
\\015\000\008\000\008\000\008\000\
\\008\000\111\000\008\000\096\000\
\\022\000\095\000\037\000\107\000\
\\031\000\109\000\088\000\071\000\
\\084\000\038\000\025\000\030\000\
\\029\000\090\000\034\000\049\000\
\\052\000\113\000\094\000\011\000\
\\008\000\008\000\106\000\008\000\
\\016\000\008\000\017\000\077\000\
\\050\000\008\000\008\000\008\000\
\\097\000\098\000\110\000\093\000\
\\072\000\043\000\077\000\073\000\
\\081\000\041\000\078\000\023\000\
\\079\000\026\000\091\000\036\000\
\\051\000\019\000\024\000\008\000\
\\027\000\018\000\020\000\008\000\
\\075\000\074\000\082\000\008\000\
\\021\000\080\000\076\000\053\000\
\\085\000\039\000\008\000\086\000\
\\000\000"
val gotoT =
"\
\\001\000\012\000\002\000\148\000\003\000\011\000\004\000\010\000\
\\005\000\009\000\006\000\008\000\007\000\007\000\022\000\006\000\
\\025\000\005\000\028\000\004\000\029\000\003\000\031\000\002\000\
\\032\000\001\000\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\008\000\039\000\000\000\
\\000\000\
\\001\000\041\000\003\000\011\000\004\000\010\000\005\000\009\000\
\\006\000\008\000\007\000\007\000\022\000\006\000\025\000\005\000\
\\028\000\004\000\029\000\003\000\031\000\002\000\032\000\001\000\000\000\
\\001\000\042\000\003\000\011\000\004\000\010\000\005\000\009\000\
\\006\000\008\000\007\000\007\000\022\000\006\000\025\000\005\000\
\\028\000\004\000\029\000\003\000\031\000\002\000\032\000\001\000\000\000\
\\001\000\043\000\003\000\011\000\004\000\010\000\005\000\009\000\
\\006\000\008\000\007\000\007\000\022\000\006\000\025\000\005\000\
\\028\000\004\000\029\000\003\000\031\000\002\000\032\000\001\000\000\000\
\\001\000\045\000\003\000\011\000\004\000\010\000\005\000\009\000\
\\006\000\008\000\007\000\007\000\022\000\006\000\025\000\005\000\
\\028\000\004\000\029\000\003\000\030\000\044\000\031\000\002\000\
\\032\000\001\000\000\000\
\\000\000\
\\000\000\
\\000\000\
\\001\000\049\000\003\000\011\000\004\000\010\000\005\000\009\000\
\\006\000\008\000\007\000\007\000\022\000\006\000\025\000\005\000\
\\028\000\004\000\029\000\003\000\031\000\002\000\032\000\001\000\000\000\
\\000\000\
\\001\000\051\000\003\000\011\000\004\000\010\000\005\000\009\000\
\\006\000\008\000\007\000\007\000\022\000\006\000\025\000\005\000\
\\028\000\004\000\029\000\003\000\031\000\002\000\032\000\001\000\000\000\
\\001\000\052\000\003\000\011\000\004\000\010\000\005\000\009\000\
\\006\000\008\000\007\000\007\000\022\000\006\000\025\000\005\000\
\\028\000\004\000\029\000\003\000\031\000\002\000\032\000\001\000\000\000\
\\001\000\053\000\003\000\011\000\004\000\010\000\005\000\009\000\
\\006\000\008\000\007\000\007\000\022\000\006\000\025\000\005\000\
\\028\000\004\000\029\000\003\000\031\000\002\000\032\000\001\000\000\000\
\\001\000\054\000\003\000\011\000\004\000\010\000\005\000\009\000\
\\006\000\008\000\007\000\007\000\022\000\006\000\025\000\005\000\
\\028\000\004\000\029\000\003\000\031\000\002\000\032\000\001\000\000\000\
\\001\000\055\000\003\000\011\000\004\000\010\000\005\000\009\000\
\\006\000\008\000\007\000\007\000\022\000\006\000\025\000\005\000\
\\028\000\004\000\029\000\003\000\031\000\002\000\032\000\001\000\000\000\
\\001\000\056\000\003\000\011\000\004\000\010\000\005\000\009\000\
\\006\000\008\000\007\000\007\000\022\000\006\000\025\000\005\000\
\\028\000\004\000\029\000\003\000\031\000\002\000\032\000\001\000\000\000\
\\001\000\057\000\003\000\011\000\004\000\010\000\005\000\009\000\
\\006\000\008\000\007\000\007\000\022\000\006\000\025\000\005\000\
\\028\000\004\000\029\000\003\000\031\000\002\000\032\000\001\000\000\000\
\\001\000\058\000\003\000\011\000\004\000\010\000\005\000\009\000\
\\006\000\008\000\007\000\007\000\022\000\006\000\025\000\005\000\
\\028\000\004\000\029\000\003\000\031\000\002\000\032\000\001\000\000\000\
\\001\000\059\000\003\000\011\000\004\000\010\000\005\000\009\000\
\\006\000\008\000\007\000\007\000\022\000\006\000\025\000\005\000\
\\028\000\004\000\029\000\003\000\031\000\002\000\032\000\001\000\000\000\
\\001\000\060\000\003\000\011\000\004\000\010\000\005\000\009\000\
\\006\000\008\000\007\000\007\000\022\000\006\000\025\000\005\000\
\\028\000\004\000\029\000\003\000\031\000\002\000\032\000\001\000\000\000\
\\001\000\061\000\003\000\011\000\004\000\010\000\005\000\009\000\
\\006\000\008\000\007\000\007\000\022\000\006\000\025\000\005\000\
\\028\000\004\000\029\000\003\000\031\000\002\000\032\000\001\000\000\000\
\\001\000\062\000\003\000\011\000\004\000\010\000\005\000\009\000\
\\006\000\008\000\007\000\007\000\022\000\006\000\025\000\005\000\
\\028\000\004\000\029\000\003\000\031\000\002\000\032\000\001\000\000\000\
\\001\000\063\000\003\000\011\000\004\000\010\000\005\000\009\000\
\\006\000\008\000\007\000\007\000\022\000\006\000\025\000\005\000\
\\028\000\004\000\029\000\003\000\031\000\002\000\032\000\001\000\000\000\
\\009\000\069\000\010\000\068\000\011\000\067\000\012\000\066\000\
\\014\000\065\000\015\000\064\000\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\026\000\080\000\027\000\079\000\000\000\
\\001\000\085\000\003\000\011\000\004\000\010\000\005\000\009\000\
\\006\000\008\000\007\000\007\000\022\000\006\000\023\000\084\000\
\\024\000\083\000\025\000\005\000\028\000\004\000\029\000\003\000\
\\031\000\002\000\032\000\001\000\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\015\000\087\000\000\000\
\\011\000\088\000\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\001\000\093\000\003\000\011\000\004\000\010\000\005\000\009\000\
\\006\000\008\000\007\000\007\000\021\000\092\000\022\000\006\000\
\\025\000\005\000\028\000\004\000\029\000\003\000\031\000\002\000\
\\032\000\001\000\000\000\
\\001\000\094\000\003\000\011\000\004\000\010\000\005\000\009\000\
\\006\000\008\000\007\000\007\000\022\000\006\000\025\000\005\000\
\\028\000\004\000\029\000\003\000\031\000\002\000\032\000\001\000\000\000\
\\001\000\095\000\003\000\011\000\004\000\010\000\005\000\009\000\
\\006\000\008\000\007\000\007\000\022\000\006\000\025\000\005\000\
\\028\000\004\000\029\000\003\000\031\000\002\000\032\000\001\000\000\000\
\\001\000\096\000\003\000\011\000\004\000\010\000\005\000\009\000\
\\006\000\008\000\007\000\007\000\022\000\006\000\025\000\005\000\
\\028\000\004\000\029\000\003\000\031\000\002\000\032\000\001\000\000\000\
\\000\000\
\\001\000\097\000\003\000\011\000\004\000\010\000\005\000\009\000\
\\006\000\008\000\007\000\007\000\022\000\006\000\025\000\005\000\
\\028\000\004\000\029\000\003\000\031\000\002\000\032\000\001\000\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\027\000\112\000\000\000\
\\001\000\113\000\003\000\011\000\004\000\010\000\005\000\009\000\
\\006\000\008\000\007\000\007\000\022\000\006\000\025\000\005\000\
\\028\000\004\000\029\000\003\000\031\000\002\000\032\000\001\000\000\000\
\\001\000\114\000\003\000\011\000\004\000\010\000\005\000\009\000\
\\006\000\008\000\007\000\007\000\022\000\006\000\025\000\005\000\
\\028\000\004\000\029\000\003\000\031\000\002\000\032\000\001\000\000\000\
\\000\000\
\\001\000\115\000\003\000\011\000\004\000\010\000\005\000\009\000\
\\006\000\008\000\007\000\007\000\022\000\006\000\025\000\005\000\
\\028\000\004\000\029\000\003\000\031\000\002\000\032\000\001\000\000\000\
\\017\000\116\000\000\000\
\\001\000\120\000\003\000\011\000\004\000\010\000\005\000\009\000\
\\006\000\008\000\007\000\007\000\022\000\006\000\025\000\005\000\
\\028\000\004\000\029\000\003\000\031\000\002\000\032\000\001\000\000\000\
\\000\000\
\\018\000\124\000\019\000\123\000\020\000\122\000\000\000\
\\000\000\
\\001\000\126\000\003\000\011\000\004\000\010\000\005\000\009\000\
\\006\000\008\000\007\000\007\000\022\000\006\000\025\000\005\000\
\\028\000\004\000\029\000\003\000\031\000\002\000\032\000\001\000\000\000\
\\001\000\127\000\003\000\011\000\004\000\010\000\005\000\009\000\
\\006\000\008\000\007\000\007\000\022\000\006\000\025\000\005\000\
\\028\000\004\000\029\000\003\000\031\000\002\000\032\000\001\000\000\000\
\\001\000\128\000\003\000\011\000\004\000\010\000\005\000\009\000\
\\006\000\008\000\007\000\007\000\022\000\006\000\025\000\005\000\
\\028\000\004\000\029\000\003\000\031\000\002\000\032\000\001\000\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\018\000\124\000\019\000\130\000\020\000\122\000\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\001\000\138\000\003\000\011\000\004\000\010\000\005\000\009\000\
\\006\000\008\000\007\000\007\000\022\000\006\000\025\000\005\000\
\\028\000\004\000\029\000\003\000\031\000\002\000\032\000\001\000\000\000\
\\000\000\
\\018\000\141\000\000\000\
\\000\000\
\\001\000\143\000\003\000\011\000\004\000\010\000\005\000\009\000\
\\006\000\008\000\007\000\007\000\022\000\006\000\025\000\005\000\
\\028\000\004\000\029\000\003\000\031\000\002\000\032\000\001\000\000\000\
\\000\000\
\\000\000\
\\000\000\
\\001\000\144\000\003\000\011\000\004\000\010\000\005\000\009\000\
\\006\000\008\000\007\000\007\000\022\000\006\000\025\000\005\000\
\\028\000\004\000\029\000\003\000\031\000\002\000\032\000\001\000\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\001\000\147\000\003\000\011\000\004\000\010\000\005\000\009\000\
\\006\000\008\000\007\000\007\000\022\000\006\000\025\000\005\000\
\\028\000\004\000\029\000\003\000\031\000\002\000\032\000\001\000\000\000\
\\000\000\
\\000\000\
\"
val numstates = 149
val numrules = 77
val s = ref "" and index = ref 0
val string_to_int = fn () => 
let val i = !index
in index := i+2; Char.ord(String.sub(!s,i)) + Char.ord(String.sub(!s,i+1)) * 256
end
val string_to_list = fn s' =>
    let val len = String.size s'
        fun f () =
           if !index < len then string_to_int() :: f()
           else nil
   in index := 0; s := s'; f ()
   end
val string_to_pairlist = fn (conv_key,conv_entry) =>
     let fun f () =
         case string_to_int()
         of 0 => EMPTY
          | n => PAIR(conv_key (n-1),conv_entry (string_to_int()),f())
     in f
     end
val string_to_pairlist_default = fn (conv_key,conv_entry) =>
    let val conv_row = string_to_pairlist(conv_key,conv_entry)
    in fn () =>
       let val default = conv_entry(string_to_int())
           val row = conv_row()
       in (row,default)
       end
   end
val string_to_table = fn (convert_row,s') =>
    let val len = String.size s'
        fun f ()=
           if !index < len then convert_row() :: f()
           else nil
     in (s := s'; index := 0; f ())
     end
local
  val memo = Array.array(numstates+numrules,ERROR)
  val _ =let fun g i=(Array.update(memo,i,REDUCE(i-numstates)); g(i+1))
       fun f i =
            if i=numstates then g i
            else (Array.update(memo,i,SHIFT (STATE i)); f (i+1))
          in f 0 handle General.Subscript => ()
          end
in
val entry_to_action = fn 0 => ACCEPT | 1 => ERROR | j => Array.sub(memo,(j-2))
end
val gotoT=Array.fromList(string_to_table(string_to_pairlist(NT,STATE),gotoT))
val actionRows=string_to_table(string_to_pairlist_default(T,entry_to_action),actionRows)
val actionRowNumbers = string_to_list actionRowNumbers
val actionT = let val actionRowLookUp=
let val a=Array.fromList(actionRows) in fn i=>Array.sub(a,i) end
in Array.fromList(List.map actionRowLookUp actionRowNumbers)
end
in LrTable.mkLrTable {actions=actionT,gotos=gotoT,numRules=numrules,
numStates=numstates,initialState=STATE 0}
end
end
local open Header in
type pos = int
type arg = unit
structure MlyValue = 
struct
datatype svalue = VOID | ntVOID of unit ->  unit
 | STRING of unit ->  (string) | INT of unit ->  (int)
 | ID of unit ->  (string) | record_exp_empty of unit ->  (A.exp)
 | unit_exp of unit ->  (A.exp)
 | exp_list of unit ->  ( ( A.exp * pos )  list)
 | seq_exp of unit ->  (A.exp) | array_exp of unit ->  (A.exp)
 | record_dec of unit ->  ( ( A.symbol * A.exp * int ) )
 | record_decs of unit ->  ( ( A.symbol * A.exp * int )  list)
 | record_exp of unit ->  (A.exp)
 | para_exp_nonempty of unit ->  (A.exp list)
 | para_exp of unit ->  (A.exp list) | call_exp of unit ->  (A.exp)
 | expseq of unit ->  ( ( A.exp * pos )  list)
 | tyfields_nonempty of unit ->  (A.field list)
 | tyfields of unit ->  (A.field list) | tyfield of unit ->  (A.field)
 | ty of unit ->  (A.ty)
 | tydeclist_nonempty of unit ->  ({ name:symbol,ty:A.ty,pos:pos }  list)
 | tydec of unit ->  ({ name:symbol,ty:A.ty,pos:pos } )
 | tydeclist of unit ->  ({ name:symbol,ty:A.ty,pos:pos }  list)
 | fundeclist_nonempty of unit ->  (A.fundec list)
 | fundeclist of unit ->  (A.fundec list)
 | fundec of unit ->  (A.fundec) | vardec of unit ->  (A.dec)
 | dec of unit ->  (A.dec) | decs of unit ->  (A.dec list)
 | bool_exp of unit ->  (A.exp) | comp_exp of unit ->  (A.exp)
 | arith_exp of unit ->  (A.exp) | assign_exp of unit ->  (A.exp)
 | lvalue of unit ->  (A.var) | program of unit ->  (A.exp)
 | exp of unit ->  (A.exp)
end
type svalue = MlyValue.svalue
type result = A.exp
end
structure EC=
struct
open LrTable
infix 5 $$
fun x $$ y = y::x
val is_keyword =
fn (T 31) => true | (T 32) => true | (T 33) => true | (T 39) => true
 | (T 35) => true | (T 36) => true | (T 37) => true | (T 41) => true
 | (T 42) => true | (T 43) => true | (T 27) => true | (T 28) => true
 | (T 29) => true | (T 30) => true | (T 34) => true | (T 38) => true
 | (T 40) => true | _ => false
val preferred_change : (term list * term list) list = 
(nil
,nil
 $$ (T 29))::
(nil
,nil
 $$ (T 30))::
(nil
,nil
 $$ (T 7))::
nil
val noShift = 
fn (T 0) => true | _ => false
val showTerminal =
fn (T 0) => "EOF"
  | (T 1) => "ID"
  | (T 2) => "INT"
  | (T 3) => "STRING"
  | (T 4) => "COMMA"
  | (T 5) => "COLON"
  | (T 6) => "SEMICOLON"
  | (T 7) => "LPAREN"
  | (T 8) => "RPAREN"
  | (T 9) => "LBRACK"
  | (T 10) => "RBRACK"
  | (T 11) => "LBRACE"
  | (T 12) => "RBRACE"
  | (T 13) => "DOT"
  | (T 14) => "PLUS"
  | (T 15) => "MINUS"
  | (T 16) => "TIMES"
  | (T 17) => "DIVIDE"
  | (T 18) => "EQ"
  | (T 19) => "NEQ"
  | (T 20) => "LT"
  | (T 21) => "LE"
  | (T 22) => "GT"
  | (T 23) => "GE"
  | (T 24) => "AND"
  | (T 25) => "OR"
  | (T 26) => "ASSIGN"
  | (T 27) => "ARRAY"
  | (T 28) => "IF"
  | (T 29) => "THEN"
  | (T 30) => "ELSE"
  | (T 31) => "WHILE"
  | (T 32) => "FOR"
  | (T 33) => "TO"
  | (T 34) => "DO"
  | (T 35) => "LET"
  | (T 36) => "IN"
  | (T 37) => "END"
  | (T 38) => "OF"
  | (T 39) => "BREAK"
  | (T 40) => "NIL"
  | (T 41) => "FUNCTION"
  | (T 42) => "VAR"
  | (T 43) => "TYPE"
  | _ => "bogus-term"
local open Header in
val errtermvalue=
fn (T 1) => MlyValue.ID(fn () => ("bogus")) | 
(T 2) => MlyValue.INT(fn () => (1)) | 
(T 3) => MlyValue.STRING(fn () => ("")) | 
_ => MlyValue.VOID
end
val terms : term list = nil
 $$ (T 43) $$ (T 42) $$ (T 41) $$ (T 40) $$ (T 39) $$ (T 38) $$ (T 37)
 $$ (T 36) $$ (T 35) $$ (T 34) $$ (T 33) $$ (T 32) $$ (T 31) $$ (T 30)
 $$ (T 29) $$ (T 28) $$ (T 27) $$ (T 26) $$ (T 25) $$ (T 24) $$ (T 23)
 $$ (T 22) $$ (T 21) $$ (T 20) $$ (T 19) $$ (T 18) $$ (T 17) $$ (T 16)
 $$ (T 15) $$ (T 14) $$ (T 13) $$ (T 12) $$ (T 11) $$ (T 10) $$ (T 9)
 $$ (T 8) $$ (T 7) $$ (T 6) $$ (T 5) $$ (T 4) $$ (T 0)end
structure Actions =
struct 
exception mlyAction of int
local open Header in
val actions = 
fn (i392,defaultPos,stack,
    (()):arg) =>
case (i392,stack)
of  ( 0, ( ( _, ( MlyValue.exp exp1, exp1left, exp1right)) :: rest671)
) => let val  result = MlyValue.program (fn _ => let val  (exp as exp1
) = exp1 ()
 in (exp)
end)
 in ( LrTable.NT 1, ( result, exp1left, exp1right), rest671)
end
|  ( 1, ( ( _, ( MlyValue.INT INT1, INT1left, INT1right)) :: rest671))
 => let val  result = MlyValue.exp (fn _ => let val  (INT as INT1) = 
INT1 ()
 in (A.IntExp INT)
end)
 in ( LrTable.NT 0, ( result, INT1left, INT1right), rest671)
end
|  ( 2, ( ( _, ( MlyValue.STRING STRING1, (STRINGleft as STRING1left),
 STRING1right)) :: rest671)) => let val  result = MlyValue.exp (fn _
 => let val  (STRING as STRING1) = STRING1 ()
 in (A.StringExp (STRING, STRINGleft))
end)
 in ( LrTable.NT 0, ( result, STRING1left, STRING1right), rest671)
end
|  ( 3, ( ( _, ( _, NIL1left, NIL1right)) :: rest671)) => let val  
result = MlyValue.exp (fn _ => (A.NilExp))
 in ( LrTable.NT 0, ( result, NIL1left, NIL1right), rest671)
end
|  ( 4, ( ( _, ( _, (BREAKleft as BREAK1left), BREAK1right)) :: 
rest671)) => let val  result = MlyValue.exp (fn _ => (
A.BreakExp BREAKleft))
 in ( LrTable.NT 0, ( result, BREAK1left, BREAK1right), rest671)
end
|  ( 5, ( ( _, ( MlyValue.exp exp2, _, exp2right)) :: _ :: ( _, ( 
MlyValue.exp exp1, _, _)) :: ( _, ( _, (WHILEleft as WHILE1left), _))
 :: rest671)) => let val  result = MlyValue.exp (fn _ => let val  exp1
 = exp1 ()
 val  exp2 = exp2 ()
 in (A.WhileExp {test=exp1, body=exp2, pos=WHILEleft})
end)
 in ( LrTable.NT 0, ( result, WHILE1left, exp2right), rest671)
end
|  ( 6, ( ( _, ( _, _, END1right)) :: ( _, ( MlyValue.expseq expseq1,
 _, _)) :: _ :: ( _, ( MlyValue.decs decs1, _, _)) :: ( _, ( _, (
LETleft as LET1left), _)) :: rest671)) => let val  result = 
MlyValue.exp (fn _ => let val  (decs as decs1) = decs1 ()
 val  (expseq as expseq1) = expseq1 ()
 in (
let val length = List.length expseq; val myexp = getExps expseq in 
                             if length = 1 then A.LetExp {decs=decs, body= myexp, pos=LETleft} else A.LetExp {decs=decs, body= A.SeqExp expseq, pos=LETleft} end 
)
end)
 in ( LrTable.NT 0, ( result, LET1left, END1right), rest671)
end
|  ( 7, ( ( _, ( MlyValue.exp exp3, _, exp3right)) :: _ :: ( _, ( 
MlyValue.exp exp2, _, _)) :: _ :: ( _, ( MlyValue.exp exp1, _, _)) :: 
( _, ( _, (IFleft as IF1left), _)) :: rest671)) => let val  result = 
MlyValue.exp (fn _ => let val  exp1 = exp1 ()
 val  exp2 = exp2 ()
 val  exp3 = exp3 ()
 in (A.IfExp {test=exp1, then'=exp2, else'=SOME(exp3), pos=IFleft})

end)
 in ( LrTable.NT 0, ( result, IF1left, exp3right), rest671)
end
|  ( 8, ( ( _, ( MlyValue.exp exp2, _, exp2right)) :: _ :: ( _, ( 
MlyValue.exp exp1, _, _)) :: ( _, ( _, (IFleft as IF1left), _)) :: 
rest671)) => let val  result = MlyValue.exp (fn _ => let val  exp1 = 
exp1 ()
 val  exp2 = exp2 ()
 in (A.IfExp {test=exp1, then'=exp2, else'=NONE, pos=IFleft})
end)
 in ( LrTable.NT 0, ( result, IF1left, exp2right), rest671)
end
|  ( 9, ( ( _, ( MlyValue.exp exp3, _, exp3right)) :: _ :: ( _, ( 
MlyValue.exp exp2, _, _)) :: _ :: ( _, ( MlyValue.exp exp1, _, _)) ::
 _ :: ( _, ( MlyValue.ID ID1, _, _)) :: ( _, ( _, (FORleft as FOR1left
), _)) :: rest671)) => let val  result = MlyValue.exp (fn _ => let
 val  (ID as ID1) = ID1 ()
 val  exp1 = exp1 ()
 val  exp2 = exp2 ()
 val  exp3 = exp3 ()
 in (
A.ForExp {var=symbol ID, escape= ref true, lo=exp1, hi=exp2, body=exp3, pos=FORleft}
)
end)
 in ( LrTable.NT 0, ( result, FOR1left, exp3right), rest671)
end
|  ( 10, ( ( _, ( MlyValue.lvalue lvalue1, lvalue1left, lvalue1right))
 :: rest671)) => let val  result = MlyValue.exp (fn _ => let val  (
lvalue as lvalue1) = lvalue1 ()
 in (A.VarExp lvalue)
end)
 in ( LrTable.NT 0, ( result, lvalue1left, lvalue1right), rest671)
end
|  ( 11, ( ( _, ( MlyValue.assign_exp assign_exp1, assign_exp1left, 
assign_exp1right)) :: rest671)) => let val  result = MlyValue.exp (fn
 _ => let val  (assign_exp as assign_exp1) = assign_exp1 ()
 in (assign_exp)
end)
 in ( LrTable.NT 0, ( result, assign_exp1left, assign_exp1right), 
rest671)
end
|  ( 12, ( ( _, ( MlyValue.array_exp array_exp1, array_exp1left, 
array_exp1right)) :: rest671)) => let val  result = MlyValue.exp (fn _
 => let val  (array_exp as array_exp1) = array_exp1 ()
 in (array_exp)
end)
 in ( LrTable.NT 0, ( result, array_exp1left, array_exp1right), 
rest671)
end
|  ( 13, ( ( _, ( MlyValue.record_exp record_exp1, record_exp1left, 
record_exp1right)) :: rest671)) => let val  result = MlyValue.exp (fn
 _ => let val  (record_exp as record_exp1) = record_exp1 ()
 in (record_exp)
end)
 in ( LrTable.NT 0, ( result, record_exp1left, record_exp1right), 
rest671)
end
|  ( 14, ( ( _, ( MlyValue.record_exp_empty record_exp_empty1, 
record_exp_empty1left, record_exp_empty1right)) :: rest671)) => let
 val  result = MlyValue.exp (fn _ => let val  (record_exp_empty as 
record_exp_empty1) = record_exp_empty1 ()
 in (record_exp_empty)
end)
 in ( LrTable.NT 0, ( result, record_exp_empty1left, 
record_exp_empty1right), rest671)
end
|  ( 15, ( ( _, ( MlyValue.arith_exp arith_exp1, arith_exp1left, 
arith_exp1right)) :: rest671)) => let val  result = MlyValue.exp (fn _
 => let val  (arith_exp as arith_exp1) = arith_exp1 ()
 in (arith_exp)
end)
 in ( LrTable.NT 0, ( result, arith_exp1left, arith_exp1right), 
rest671)
end
|  ( 16, ( ( _, ( MlyValue.comp_exp comp_exp1, comp_exp1left, 
comp_exp1right)) :: rest671)) => let val  result = MlyValue.exp (fn _
 => let val  (comp_exp as comp_exp1) = comp_exp1 ()
 in (comp_exp)
end)
 in ( LrTable.NT 0, ( result, comp_exp1left, comp_exp1right), rest671)

end
|  ( 17, ( ( _, ( MlyValue.bool_exp bool_exp1, bool_exp1left, 
bool_exp1right)) :: rest671)) => let val  result = MlyValue.exp (fn _
 => let val  (bool_exp as bool_exp1) = bool_exp1 ()
 in (bool_exp)
end)
 in ( LrTable.NT 0, ( result, bool_exp1left, bool_exp1right), rest671)

end
|  ( 18, ( ( _, ( MlyValue.call_exp call_exp1, call_exp1left, 
call_exp1right)) :: rest671)) => let val  result = MlyValue.exp (fn _
 => let val  (call_exp as call_exp1) = call_exp1 ()
 in (call_exp)
end)
 in ( LrTable.NT 0, ( result, call_exp1left, call_exp1right), rest671)

end
|  ( 19, ( ( _, ( MlyValue.seq_exp seq_exp1, seq_exp1left, 
seq_exp1right)) :: rest671)) => let val  result = MlyValue.exp (fn _
 => let val  (seq_exp as seq_exp1) = seq_exp1 ()
 in (seq_exp)
end)
 in ( LrTable.NT 0, ( result, seq_exp1left, seq_exp1right), rest671)

end
|  ( 20, ( ( _, ( MlyValue.unit_exp unit_exp1, unit_exp1left, 
unit_exp1right)) :: rest671)) => let val  result = MlyValue.exp (fn _
 => let val  (unit_exp as unit_exp1) = unit_exp1 ()
 in (unit_exp)
end)
 in ( LrTable.NT 0, ( result, unit_exp1left, unit_exp1right), rest671)

end
|  ( 21, ( ( _, ( MlyValue.dec dec1, _, dec1right)) :: ( _, ( 
MlyValue.decs decs1, decs1left, _)) :: rest671)) => let val  result = 
MlyValue.decs (fn _ => let val  (decs as decs1) = decs1 ()
 val  (dec as dec1) = dec1 ()
 in (decs @ [dec])
end)
 in ( LrTable.NT 7, ( result, decs1left, dec1right), rest671)
end
|  ( 22, ( rest671)) => let val  result = MlyValue.decs (fn _ => ([]))
 in ( LrTable.NT 7, ( result, defaultPos, defaultPos), rest671)
end
|  ( 23, ( ( _, ( MlyValue.tydeclist tydeclist1, tydeclist1left, 
tydeclist1right)) :: rest671)) => let val  result = MlyValue.dec (fn _
 => let val  (tydeclist as tydeclist1) = tydeclist1 ()
 in (A.TypeDec tydeclist)
end)
 in ( LrTable.NT 8, ( result, tydeclist1left, tydeclist1right), 
rest671)
end
|  ( 24, ( ( _, ( MlyValue.vardec vardec1, vardec1left, vardec1right))
 :: rest671)) => let val  result = MlyValue.dec (fn _ => let val  (
vardec as vardec1) = vardec1 ()
 in (vardec)
end)
 in ( LrTable.NT 8, ( result, vardec1left, vardec1right), rest671)
end
|  ( 25, ( ( _, ( MlyValue.fundeclist fundeclist1, fundeclist1left, 
fundeclist1right)) :: rest671)) => let val  result = MlyValue.dec (fn
 _ => let val  (fundeclist as fundeclist1) = fundeclist1 ()
 in (A.FunctionDec fundeclist)
end)
 in ( LrTable.NT 8, ( result, fundeclist1left, fundeclist1right), 
rest671)
end
|  ( 26, ( ( _, ( MlyValue.tydec tydec1, tydec1left, tydec1right)) :: 
rest671)) => let val  result = MlyValue.tydeclist (fn _ => let val  (
tydec as tydec1) = tydec1 ()
 in ([tydec])
end)
 in ( LrTable.NT 13, ( result, tydec1left, tydec1right), rest671)
end
|  ( 27, ( ( _, ( MlyValue.tydec tydec1, _, tydec1right)) :: ( _, ( 
MlyValue.tydeclist tydeclist1, tydeclist1left, _)) :: rest671)) => let
 val  result = MlyValue.tydeclist (fn _ => let val  (tydeclist as 
tydeclist1) = tydeclist1 ()
 val  (tydec as tydec1) = tydec1 ()
 in (tydeclist @ [tydec])
end)
 in ( LrTable.NT 13, ( result, tydeclist1left, tydec1right), rest671)

end
|  ( 28, ( ( _, ( MlyValue.ty ty1, _, ty1right)) :: _ :: ( _, ( 
MlyValue.ID ID1, _, _)) :: ( _, ( _, (TYPEleft as TYPE1left), _)) :: 
rest671)) => let val  result = MlyValue.tydec (fn _ => let val  (ID
 as ID1) = ID1 ()
 val  (ty as ty1) = ty1 ()
 in ({name=symbol ID, ty=ty, pos=TYPEleft})
end)
 in ( LrTable.NT 14, ( result, TYPE1left, ty1right), rest671)
end
|  ( 29, ( ( _, ( MlyValue.ID ID1, (IDleft as ID1left), ID1right)) :: 
rest671)) => let val  result = MlyValue.ty (fn _ => let val  (ID as 
ID1) = ID1 ()
 in (A.NameTy (symbol ID, IDleft))
end)
 in ( LrTable.NT 16, ( result, ID1left, ID1right), rest671)
end
|  ( 30, ( ( _, ( _, _, RBRACE1right)) :: ( _, ( MlyValue.tyfields 
tyfields1, _, _)) :: ( _, ( _, LBRACE1left, _)) :: rest671)) => let
 val  result = MlyValue.ty (fn _ => let val  (tyfields as tyfields1) =
 tyfields1 ()
 in (A.RecordTy tyfields)
end)
 in ( LrTable.NT 16, ( result, LBRACE1left, RBRACE1right), rest671)

end
|  ( 31, ( ( _, ( MlyValue.ID ID1, _, ID1right)) :: _ :: ( _, ( _, (
ARRAYleft as ARRAY1left), _)) :: rest671)) => let val  result = 
MlyValue.ty (fn _ => let val  (ID as ID1) = ID1 ()
 in (A.ArrayTy (symbol ID, ARRAYleft))
end)
 in ( LrTable.NT 16, ( result, ARRAY1left, ID1right), rest671)
end
|  ( 32, ( ( _, ( MlyValue.ID ID2, _, ID2right)) :: _ :: ( _, ( 
MlyValue.ID ID1, ID1left, _)) :: rest671)) => let val  result = 
MlyValue.tyfield (fn _ => let val  ID1 = ID1 ()
 val  ID2 = ID2 ()
 in ({name=symbol ID1, escape=ref true, typ=symbol ID2, pos=ID1left})

end)
 in ( LrTable.NT 17, ( result, ID1left, ID2right), rest671)
end
|  ( 33, ( rest671)) => let val  result = MlyValue.tyfields (fn _ => (
[]))
 in ( LrTable.NT 18, ( result, defaultPos, defaultPos), rest671)
end
|  ( 34, ( ( _, ( MlyValue.tyfields_nonempty tyfields_nonempty1, 
tyfields_nonempty1left, tyfields_nonempty1right)) :: rest671)) => let
 val  result = MlyValue.tyfields (fn _ => let val  (tyfields_nonempty
 as tyfields_nonempty1) = tyfields_nonempty1 ()
 in (tyfields_nonempty)
end)
 in ( LrTable.NT 18, ( result, tyfields_nonempty1left, 
tyfields_nonempty1right), rest671)
end
|  ( 35, ( ( _, ( MlyValue.tyfield tyfield1, tyfield1left, 
tyfield1right)) :: rest671)) => let val  result = 
MlyValue.tyfields_nonempty (fn _ => let val  (tyfield as tyfield1) = 
tyfield1 ()
 in ([tyfield])
end)
 in ( LrTable.NT 19, ( result, tyfield1left, tyfield1right), rest671)

end
|  ( 36, ( ( _, ( MlyValue.tyfield tyfield1, _, tyfield1right)) :: _
 :: ( _, ( MlyValue.tyfields tyfields1, tyfields1left, _)) :: rest671)
) => let val  result = MlyValue.tyfields_nonempty (fn _ => let val  (
tyfields as tyfields1) = tyfields1 ()
 val  (tyfield as tyfield1) = tyfield1 ()
 in (tyfields @ [tyfield])
end)
 in ( LrTable.NT 19, ( result, tyfields1left, tyfield1right), rest671)

end
|  ( 37, ( ( _, ( MlyValue.exp exp1, _, exp1right)) :: _ :: ( _, ( 
MlyValue.ID ID1, _, _)) :: ( _, ( _, (VARleft as VAR1left), _)) :: 
rest671)) => let val  result = MlyValue.vardec (fn _ => let val  (ID
 as ID1) = ID1 ()
 val  (exp as exp1) = exp1 ()
 in (
A.VarDec {name=symbol ID, escape= ref true, typ=NONE, init=exp, pos=VARleft}
)
end)
 in ( LrTable.NT 9, ( result, VAR1left, exp1right), rest671)
end
|  ( 38, ( ( _, ( MlyValue.exp exp1, _, exp1right)) :: _ :: ( _, ( 
MlyValue.ID ID2, ID2left, _)) :: _ :: ( _, ( MlyValue.ID ID1, _, _))
 :: ( _, ( _, (VARleft as VAR1left), _)) :: rest671)) => let val  
result = MlyValue.vardec (fn _ => let val  ID1 = ID1 ()
 val  ID2 = ID2 ()
 val  (exp as exp1) = exp1 ()
 in (
A.VarDec {name=symbol ID1, escape= ref true, typ=SOME (symbol ID2, ID2left), init=exp, pos=VARleft}
)
end)
 in ( LrTable.NT 9, ( result, VAR1left, exp1right), rest671)
end
|  ( 39, ( ( _, ( MlyValue.fundec fundec1, fundec1left, fundec1right))
 :: rest671)) => let val  result = MlyValue.fundeclist (fn _ => let
 val  (fundec as fundec1) = fundec1 ()
 in ([fundec])
end)
 in ( LrTable.NT 11, ( result, fundec1left, fundec1right), rest671)

end
|  ( 40, ( ( _, ( MlyValue.fundec fundec1, _, fundec1right)) :: ( _, (
 MlyValue.fundeclist fundeclist1, fundeclist1left, _)) :: rest671)) =>
 let val  result = MlyValue.fundeclist (fn _ => let val  (fundeclist
 as fundeclist1) = fundeclist1 ()
 val  (fundec as fundec1) = fundec1 ()
 in (fundeclist @ [fundec])
end)
 in ( LrTable.NT 11, ( result, fundeclist1left, fundec1right), rest671
)
end
|  ( 41, ( ( _, ( MlyValue.exp exp1, _, exp1right)) :: _ :: _ :: ( _, 
( MlyValue.tyfields tyfields1, _, _)) :: _ :: ( _, ( MlyValue.ID ID1,
 _, _)) :: ( _, ( _, (FUNCTIONleft as FUNCTION1left), _)) :: rest671))
 => let val  result = MlyValue.fundec (fn _ => let val  (ID as ID1) = 
ID1 ()
 val  (tyfields as tyfields1) = tyfields1 ()
 val  (exp as exp1) = exp1 ()
 in (
{name=symbol ID, params=tyfields, result=NONE, body=exp, pos=FUNCTIONleft}
)
end)
 in ( LrTable.NT 10, ( result, FUNCTION1left, exp1right), rest671)
end
|  ( 42, ( ( _, ( MlyValue.exp exp1, _, exp1right)) :: _ :: ( _, ( 
MlyValue.ID ID2, ID2left, _)) :: _ :: _ :: ( _, ( MlyValue.tyfields 
tyfields1, _, _)) :: _ :: ( _, ( MlyValue.ID ID1, _, _)) :: ( _, ( _,
 (FUNCTIONleft as FUNCTION1left), _)) :: rest671)) => let val  result
 = MlyValue.fundec (fn _ => let val  ID1 = ID1 ()
 val  (tyfields as tyfields1) = tyfields1 ()
 val  ID2 = ID2 ()
 val  (exp as exp1) = exp1 ()
 in (
{name=symbol ID1, params=tyfields, result=SOME (symbol ID2, ID2left), body=exp, pos=FUNCTIONleft}
)
end)
 in ( LrTable.NT 10, ( result, FUNCTION1left, exp1right), rest671)
end
|  ( 43, ( ( _, ( MlyValue.ID ID1, (IDleft as ID1left), ID1right)) :: 
rest671)) => let val  result = MlyValue.lvalue (fn _ => let val  (ID
 as ID1) = ID1 ()
 in (simpleVar (ID, IDleft))
end)
 in ( LrTable.NT 2, ( result, ID1left, ID1right), rest671)
end
|  ( 44, ( ( _, ( _, _, RBRACK1right)) :: ( _, ( MlyValue.exp exp1, _,
 _)) :: _ :: ( _, ( MlyValue.lvalue lvalue1, (lvalueleft as 
lvalue1left), _)) :: rest671)) => let val  result = MlyValue.lvalue
 (fn _ => let val  (lvalue as lvalue1) = lvalue1 ()
 val  (exp as exp1) = exp1 ()
 in (A.SubscriptVar(lvalue, exp, lvalueleft))
end)
 in ( LrTable.NT 2, ( result, lvalue1left, RBRACK1right), rest671)
end
|  ( 45, ( ( _, ( MlyValue.ID ID1, _, ID1right)) :: _ :: ( _, ( 
MlyValue.lvalue lvalue1, (lvalueleft as lvalue1left), _)) :: rest671))
 => let val  result = MlyValue.lvalue (fn _ => let val  (lvalue as 
lvalue1) = lvalue1 ()
 val  (ID as ID1) = ID1 ()
 in (A.FieldVar(lvalue, (symbol ID), lvalueleft))
end)
 in ( LrTable.NT 2, ( result, lvalue1left, ID1right), rest671)
end
|  ( 46, ( ( _, ( MlyValue.exp exp1, (expleft as exp1left), exp1right)
) :: rest671)) => let val  result = MlyValue.expseq (fn _ => let val 
 (exp as exp1) = exp1 ()
 in ([(exp, expleft)])
end)
 in ( LrTable.NT 20, ( result, exp1left, exp1right), rest671)
end
|  ( 47, ( ( _, ( MlyValue.exp exp1, expleft, exp1right)) :: _ :: ( _,
 ( MlyValue.expseq expseq1, expseq1left, _)) :: rest671)) => let val  
result = MlyValue.expseq (fn _ => let val  (expseq as expseq1) = 
expseq1 ()
 val  (exp as exp1) = exp1 ()
 in (expseq @ [(exp, expleft)])
end)
 in ( LrTable.NT 20, ( result, expseq1left, exp1right), rest671)
end
|  ( 48, ( ( _, ( MlyValue.exp exp1, _, exp1right)) :: _ :: ( _, ( 
MlyValue.lvalue lvalue1, (lvalueleft as lvalue1left), _)) :: rest671))
 => let val  result = MlyValue.assign_exp (fn _ => let val  (lvalue
 as lvalue1) = lvalue1 ()
 val  (exp as exp1) = exp1 ()
 in (A.AssignExp {var=lvalue, exp=exp, pos=lvalueleft})
end)
 in ( LrTable.NT 3, ( result, lvalue1left, exp1right), rest671)
end
|  ( 49, ( ( _, ( MlyValue.exp exp2, _, exp2right)) :: _ :: _ :: ( _, 
( MlyValue.exp exp1, _, _)) :: _ :: ( _, ( MlyValue.lvalue lvalue1, (
lvalueleft as lvalue1left), _)) :: rest671)) => let val  result = 
MlyValue.array_exp (fn _ => let val  (lvalue as lvalue1) = lvalue1 ()
 val  exp1 = exp1 ()
 val  exp2 = exp2 ()
 in (
A.ArrayExp {typ=getID(lvalue), size=exp1, init=exp2, pos=lvalueleft})

end)
 in ( LrTable.NT 27, ( result, lvalue1left, exp2right), rest671)
end
|  ( 50, ( ( _, ( _, _, RBRACE1right)) :: ( _, ( MlyValue.record_decs 
record_decs1, _, _)) :: _ :: ( _, ( MlyValue.ID ID1, (IDleft as 
ID1left), _)) :: rest671)) => let val  result = MlyValue.record_exp
 (fn _ => let val  (ID as ID1) = ID1 ()
 val  (record_decs as record_decs1) = record_decs1 ()
 in (A.RecordExp {fields=record_decs, typ=symbol ID, pos=IDleft})
end)
 in ( LrTable.NT 24, ( result, ID1left, RBRACE1right), rest671)
end
|  ( 51, ( ( _, ( _, _, RBRACE1right)) :: _ :: ( _, ( MlyValue.ID ID1,
 (IDleft as ID1left), _)) :: rest671)) => let val  result = 
MlyValue.record_exp_empty (fn _ => let val  (ID as ID1) = ID1 ()
 in (A.RecordExp {fields=[], typ=symbol ID, pos=IDleft})
end)
 in ( LrTable.NT 31, ( result, ID1left, RBRACE1right), rest671)
end
|  ( 52, ( ( _, ( MlyValue.record_dec record_dec1, record_dec1left, 
record_dec1right)) :: rest671)) => let val  result = 
MlyValue.record_decs (fn _ => let val  (record_dec as record_dec1) = 
record_dec1 ()
 in ([record_dec])
end)
 in ( LrTable.NT 25, ( result, record_dec1left, record_dec1right), 
rest671)
end
|  ( 53, ( ( _, ( MlyValue.record_dec record_dec1, _, record_dec1right
)) :: _ :: ( _, ( MlyValue.record_decs record_decs1, record_decs1left,
 _)) :: rest671)) => let val  result = MlyValue.record_decs (fn _ =>
 let val  (record_decs as record_decs1) = record_decs1 ()
 val  (record_dec as record_dec1) = record_dec1 ()
 in (record_decs @ [record_dec])
end)
 in ( LrTable.NT 25, ( result, record_decs1left, record_dec1right), 
rest671)
end
|  ( 54, ( ( _, ( MlyValue.exp exp1, _, exp1right)) :: _ :: ( _, ( 
MlyValue.ID ID1, (IDleft as ID1left), _)) :: rest671)) => let val  
result = MlyValue.record_dec (fn _ => let val  (ID as ID1) = ID1 ()
 val  (exp as exp1) = exp1 ()
 in ((symbol ID, exp, IDleft))
end)
 in ( LrTable.NT 26, ( result, ID1left, exp1right), rest671)
end
|  ( 55, ( ( _, ( MlyValue.exp exp2, _, exp2right)) :: _ :: ( _, ( 
MlyValue.exp exp1, exp1left, _)) :: rest671)) => let val  result = 
MlyValue.arith_exp (fn _ => let val  exp1 = exp1 ()
 val  exp2 = exp2 ()
 in (A.OpExp {left=exp1, oper=A.PlusOp, right=exp2, pos=exp1left})
end
)
 in ( LrTable.NT 4, ( result, exp1left, exp2right), rest671)
end
|  ( 56, ( ( _, ( MlyValue.exp exp2, _, exp2right)) :: _ :: ( _, ( 
MlyValue.exp exp1, exp1left, _)) :: rest671)) => let val  result = 
MlyValue.arith_exp (fn _ => let val  exp1 = exp1 ()
 val  exp2 = exp2 ()
 in (A.OpExp {left=exp1, oper=A.MinusOp, right=exp2, pos=exp1left})

end)
 in ( LrTable.NT 4, ( result, exp1left, exp2right), rest671)
end
|  ( 57, ( ( _, ( MlyValue.exp exp2, _, exp2right)) :: _ :: ( _, ( 
MlyValue.exp exp1, exp1left, _)) :: rest671)) => let val  result = 
MlyValue.arith_exp (fn _ => let val  exp1 = exp1 ()
 val  exp2 = exp2 ()
 in (A.OpExp {left=exp1, oper=A.TimesOp, right=exp2, pos=exp1left})

end)
 in ( LrTable.NT 4, ( result, exp1left, exp2right), rest671)
end
|  ( 58, ( ( _, ( MlyValue.exp exp2, _, exp2right)) :: _ :: ( _, ( 
MlyValue.exp exp1, exp1left, _)) :: rest671)) => let val  result = 
MlyValue.arith_exp (fn _ => let val  exp1 = exp1 ()
 val  exp2 = exp2 ()
 in (A.OpExp {left=exp1, oper=A.DivideOp, right=exp2, pos=exp1left})

end)
 in ( LrTable.NT 4, ( result, exp1left, exp2right), rest671)
end
|  ( 59, ( ( _, ( MlyValue.exp exp1, _, exp1right)) :: ( _, ( _, (
MINUSleft as MINUS1left), _)) :: rest671)) => let val  result = 
MlyValue.arith_exp (fn _ => let val  (exp as exp1) = exp1 ()
 in (
A.OpExp {left=A.IntExp(0), oper=A.MinusOp, right=exp, pos=MINUSleft})

end)
 in ( LrTable.NT 4, ( result, MINUS1left, exp1right), rest671)
end
|  ( 60, ( ( _, ( MlyValue.exp exp2, _, exp2right)) :: _ :: ( _, ( 
MlyValue.exp exp1, exp1left, _)) :: rest671)) => let val  result = 
MlyValue.comp_exp (fn _ => let val  exp1 = exp1 ()
 val  exp2 = exp2 ()
 in (A.OpExp {left=exp1, oper=A.EqOp, right=exp2, pos=exp1left})
end)
 in ( LrTable.NT 5, ( result, exp1left, exp2right), rest671)
end
|  ( 61, ( ( _, ( MlyValue.exp exp2, _, exp2right)) :: _ :: ( _, ( 
MlyValue.exp exp1, exp1left, _)) :: rest671)) => let val  result = 
MlyValue.comp_exp (fn _ => let val  exp1 = exp1 ()
 val  exp2 = exp2 ()
 in (A.OpExp {left=exp1, oper=A.NeqOp, right=exp2, pos=exp1left})
end)
 in ( LrTable.NT 5, ( result, exp1left, exp2right), rest671)
end
|  ( 62, ( ( _, ( MlyValue.exp exp2, _, exp2right)) :: _ :: ( _, ( 
MlyValue.exp exp1, exp1left, _)) :: rest671)) => let val  result = 
MlyValue.comp_exp (fn _ => let val  exp1 = exp1 ()
 val  exp2 = exp2 ()
 in (A.OpExp {left=exp1, oper=A.LtOp, right=exp2, pos=exp1left})
end)
 in ( LrTable.NT 5, ( result, exp1left, exp2right), rest671)
end
|  ( 63, ( ( _, ( MlyValue.exp exp2, _, exp2right)) :: _ :: ( _, ( 
MlyValue.exp exp1, exp1left, _)) :: rest671)) => let val  result = 
MlyValue.comp_exp (fn _ => let val  exp1 = exp1 ()
 val  exp2 = exp2 ()
 in (A.OpExp {left=exp1, oper=A.LeOp, right=exp2, pos=exp1left})
end)
 in ( LrTable.NT 5, ( result, exp1left, exp2right), rest671)
end
|  ( 64, ( ( _, ( MlyValue.exp exp2, _, exp2right)) :: _ :: ( _, ( 
MlyValue.exp exp1, exp1left, _)) :: rest671)) => let val  result = 
MlyValue.comp_exp (fn _ => let val  exp1 = exp1 ()
 val  exp2 = exp2 ()
 in (A.OpExp {left=exp1, oper=A.GtOp, right=exp2, pos=exp1left})
end)
 in ( LrTable.NT 5, ( result, exp1left, exp2right), rest671)
end
|  ( 65, ( ( _, ( MlyValue.exp exp2, _, exp2right)) :: _ :: ( _, ( 
MlyValue.exp exp1, exp1left, _)) :: rest671)) => let val  result = 
MlyValue.comp_exp (fn _ => let val  exp1 = exp1 ()
 val  exp2 = exp2 ()
 in (A.OpExp {left=exp1, oper=A.GeOp, right=exp2, pos=exp1left})
end)
 in ( LrTable.NT 5, ( result, exp1left, exp2right), rest671)
end
|  ( 66, ( ( _, ( MlyValue.exp exp2, _, exp2right)) :: _ :: ( _, ( 
MlyValue.exp exp1, (expleft as exp1left), _)) :: rest671)) => let val 
 result = MlyValue.bool_exp (fn _ => let val  exp1 = exp1 ()
 val  exp2 = exp2 ()
 in (
A.IfExp {test=exp1, then'=exp2, else'=SOME(A.IntExp(0)), pos=expleft})

end)
 in ( LrTable.NT 6, ( result, exp1left, exp2right), rest671)
end
|  ( 67, ( ( _, ( MlyValue.exp exp2, _, exp2right)) :: _ :: ( _, ( 
MlyValue.exp exp1, (expleft as exp1left), _)) :: rest671)) => let val 
 result = MlyValue.bool_exp (fn _ => let val  exp1 = exp1 ()
 val  exp2 = exp2 ()
 in (
A.IfExp {test=exp1, then'=A.IntExp(1), else'=SOME(exp2), pos=expleft})

end)
 in ( LrTable.NT 6, ( result, exp1left, exp2right), rest671)
end
|  ( 68, ( ( _, ( _, _, RPAREN1right)) :: ( _, ( MlyValue.para_exp 
para_exp1, _, _)) :: _ :: ( _, ( MlyValue.ID ID1, (IDleft as ID1left),
 _)) :: rest671)) => let val  result = MlyValue.call_exp (fn _ => let
 val  (ID as ID1) = ID1 ()
 val  (para_exp as para_exp1) = para_exp1 ()
 in (A.CallExp {func=symbol ID, args=para_exp, pos=IDleft})
end)
 in ( LrTable.NT 21, ( result, ID1left, RPAREN1right), rest671)
end
|  ( 69, ( ( _, ( MlyValue.para_exp_nonempty para_exp_nonempty1, 
para_exp_nonempty1left, para_exp_nonempty1right)) :: rest671)) => let
 val  result = MlyValue.para_exp (fn _ => let val  (para_exp_nonempty
 as para_exp_nonempty1) = para_exp_nonempty1 ()
 in (para_exp_nonempty)
end)
 in ( LrTable.NT 22, ( result, para_exp_nonempty1left, 
para_exp_nonempty1right), rest671)
end
|  ( 70, ( rest671)) => let val  result = MlyValue.para_exp (fn _ => (
[]))
 in ( LrTable.NT 22, ( result, defaultPos, defaultPos), rest671)
end
|  ( 71, ( ( _, ( MlyValue.exp exp1, exp1left, exp1right)) :: rest671)
) => let val  result = MlyValue.para_exp_nonempty (fn _ => let val  (
exp as exp1) = exp1 ()
 in ([exp])
end)
 in ( LrTable.NT 23, ( result, exp1left, exp1right), rest671)
end
|  ( 72, ( ( _, ( MlyValue.exp exp1, _, exp1right)) :: _ :: ( _, ( 
MlyValue.para_exp_nonempty para_exp_nonempty1, para_exp_nonempty1left,
 _)) :: rest671)) => let val  result = MlyValue.para_exp_nonempty (fn
 _ => let val  (para_exp_nonempty as para_exp_nonempty1) = 
para_exp_nonempty1 ()
 val  (exp as exp1) = exp1 ()
 in (para_exp_nonempty @ [exp])
end)
 in ( LrTable.NT 23, ( result, para_exp_nonempty1left, exp1right), 
rest671)
end
|  ( 73, ( ( _, ( _, _, RPAREN1right)) :: ( _, ( MlyValue.exp_list 
exp_list1, _, _)) :: ( _, ( _, LPAREN1left, _)) :: rest671)) => let
 val  result = MlyValue.seq_exp (fn _ => let val  (exp_list as 
exp_list1) = exp_list1 ()
 in (
let val length = List.length exp_list; val myexp = getExps exp_list in
                            if length = 1 then myexp else A.SeqExp exp_list end 
)
end)
 in ( LrTable.NT 28, ( result, LPAREN1left, RPAREN1right), rest671)

end
|  ( 74, ( ( _, ( MlyValue.exp exp1, (expleft as exp1left), exp1right)
) :: rest671)) => let val  result = MlyValue.exp_list (fn _ => let
 val  (exp as exp1) = exp1 ()
 in ([(exp, expleft)])
end)
 in ( LrTable.NT 29, ( result, exp1left, exp1right), rest671)
end
|  ( 75, ( ( _, ( MlyValue.exp exp1, expleft, exp1right)) :: _ :: ( _,
 ( MlyValue.exp_list exp_list1, exp_list1left, _)) :: rest671)) => let
 val  result = MlyValue.exp_list (fn _ => let val  (exp_list as 
exp_list1) = exp_list1 ()
 val  (exp as exp1) = exp1 ()
 in (exp_list @ [(exp, expleft)])
end)
 in ( LrTable.NT 29, ( result, exp_list1left, exp1right), rest671)
end
|  ( 76, ( ( _, ( _, _, RPAREN1right)) :: ( _, ( _, LPAREN1left, _))
 :: rest671)) => let val  result = MlyValue.unit_exp (fn _ => (
A.SeqExp []))
 in ( LrTable.NT 30, ( result, LPAREN1left, RPAREN1right), rest671)

end
| _ => raise (mlyAction i392)
end
val void = MlyValue.VOID
val extract = fn a => (fn MlyValue.program x => x
| _ => let exception ParseInternal
	in raise ParseInternal end) a ()
end
end
structure Tokens : Tiger_TOKENS =
struct
type svalue = ParserData.svalue
type ('a,'b) token = ('a,'b) Token.token
fun EOF (p1,p2) = Token.TOKEN (ParserData.LrTable.T 0,(
ParserData.MlyValue.VOID,p1,p2))
fun ID (i,p1,p2) = Token.TOKEN (ParserData.LrTable.T 1,(
ParserData.MlyValue.ID (fn () => i),p1,p2))
fun INT (i,p1,p2) = Token.TOKEN (ParserData.LrTable.T 2,(
ParserData.MlyValue.INT (fn () => i),p1,p2))
fun STRING (i,p1,p2) = Token.TOKEN (ParserData.LrTable.T 3,(
ParserData.MlyValue.STRING (fn () => i),p1,p2))
fun COMMA (p1,p2) = Token.TOKEN (ParserData.LrTable.T 4,(
ParserData.MlyValue.VOID,p1,p2))
fun COLON (p1,p2) = Token.TOKEN (ParserData.LrTable.T 5,(
ParserData.MlyValue.VOID,p1,p2))
fun SEMICOLON (p1,p2) = Token.TOKEN (ParserData.LrTable.T 6,(
ParserData.MlyValue.VOID,p1,p2))
fun LPAREN (p1,p2) = Token.TOKEN (ParserData.LrTable.T 7,(
ParserData.MlyValue.VOID,p1,p2))
fun RPAREN (p1,p2) = Token.TOKEN (ParserData.LrTable.T 8,(
ParserData.MlyValue.VOID,p1,p2))
fun LBRACK (p1,p2) = Token.TOKEN (ParserData.LrTable.T 9,(
ParserData.MlyValue.VOID,p1,p2))
fun RBRACK (p1,p2) = Token.TOKEN (ParserData.LrTable.T 10,(
ParserData.MlyValue.VOID,p1,p2))
fun LBRACE (p1,p2) = Token.TOKEN (ParserData.LrTable.T 11,(
ParserData.MlyValue.VOID,p1,p2))
fun RBRACE (p1,p2) = Token.TOKEN (ParserData.LrTable.T 12,(
ParserData.MlyValue.VOID,p1,p2))
fun DOT (p1,p2) = Token.TOKEN (ParserData.LrTable.T 13,(
ParserData.MlyValue.VOID,p1,p2))
fun PLUS (p1,p2) = Token.TOKEN (ParserData.LrTable.T 14,(
ParserData.MlyValue.VOID,p1,p2))
fun MINUS (p1,p2) = Token.TOKEN (ParserData.LrTable.T 15,(
ParserData.MlyValue.VOID,p1,p2))
fun TIMES (p1,p2) = Token.TOKEN (ParserData.LrTable.T 16,(
ParserData.MlyValue.VOID,p1,p2))
fun DIVIDE (p1,p2) = Token.TOKEN (ParserData.LrTable.T 17,(
ParserData.MlyValue.VOID,p1,p2))
fun EQ (p1,p2) = Token.TOKEN (ParserData.LrTable.T 18,(
ParserData.MlyValue.VOID,p1,p2))
fun NEQ (p1,p2) = Token.TOKEN (ParserData.LrTable.T 19,(
ParserData.MlyValue.VOID,p1,p2))
fun LT (p1,p2) = Token.TOKEN (ParserData.LrTable.T 20,(
ParserData.MlyValue.VOID,p1,p2))
fun LE (p1,p2) = Token.TOKEN (ParserData.LrTable.T 21,(
ParserData.MlyValue.VOID,p1,p2))
fun GT (p1,p2) = Token.TOKEN (ParserData.LrTable.T 22,(
ParserData.MlyValue.VOID,p1,p2))
fun GE (p1,p2) = Token.TOKEN (ParserData.LrTable.T 23,(
ParserData.MlyValue.VOID,p1,p2))
fun AND (p1,p2) = Token.TOKEN (ParserData.LrTable.T 24,(
ParserData.MlyValue.VOID,p1,p2))
fun OR (p1,p2) = Token.TOKEN (ParserData.LrTable.T 25,(
ParserData.MlyValue.VOID,p1,p2))
fun ASSIGN (p1,p2) = Token.TOKEN (ParserData.LrTable.T 26,(
ParserData.MlyValue.VOID,p1,p2))
fun ARRAY (p1,p2) = Token.TOKEN (ParserData.LrTable.T 27,(
ParserData.MlyValue.VOID,p1,p2))
fun IF (p1,p2) = Token.TOKEN (ParserData.LrTable.T 28,(
ParserData.MlyValue.VOID,p1,p2))
fun THEN (p1,p2) = Token.TOKEN (ParserData.LrTable.T 29,(
ParserData.MlyValue.VOID,p1,p2))
fun ELSE (p1,p2) = Token.TOKEN (ParserData.LrTable.T 30,(
ParserData.MlyValue.VOID,p1,p2))
fun WHILE (p1,p2) = Token.TOKEN (ParserData.LrTable.T 31,(
ParserData.MlyValue.VOID,p1,p2))
fun FOR (p1,p2) = Token.TOKEN (ParserData.LrTable.T 32,(
ParserData.MlyValue.VOID,p1,p2))
fun TO (p1,p2) = Token.TOKEN (ParserData.LrTable.T 33,(
ParserData.MlyValue.VOID,p1,p2))
fun DO (p1,p2) = Token.TOKEN (ParserData.LrTable.T 34,(
ParserData.MlyValue.VOID,p1,p2))
fun LET (p1,p2) = Token.TOKEN (ParserData.LrTable.T 35,(
ParserData.MlyValue.VOID,p1,p2))
fun IN (p1,p2) = Token.TOKEN (ParserData.LrTable.T 36,(
ParserData.MlyValue.VOID,p1,p2))
fun END (p1,p2) = Token.TOKEN (ParserData.LrTable.T 37,(
ParserData.MlyValue.VOID,p1,p2))
fun OF (p1,p2) = Token.TOKEN (ParserData.LrTable.T 38,(
ParserData.MlyValue.VOID,p1,p2))
fun BREAK (p1,p2) = Token.TOKEN (ParserData.LrTable.T 39,(
ParserData.MlyValue.VOID,p1,p2))
fun NIL (p1,p2) = Token.TOKEN (ParserData.LrTable.T 40,(
ParserData.MlyValue.VOID,p1,p2))
fun FUNCTION (p1,p2) = Token.TOKEN (ParserData.LrTable.T 41,(
ParserData.MlyValue.VOID,p1,p2))
fun VAR (p1,p2) = Token.TOKEN (ParserData.LrTable.T 42,(
ParserData.MlyValue.VOID,p1,p2))
fun TYPE (p1,p2) = Token.TOKEN (ParserData.LrTable.T 43,(
ParserData.MlyValue.VOID,p1,p2))
end
end
